// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  admin: (where?: AdminWhereInput) => Promise<boolean>;
  angkatan: (where?: AngkatanWhereInput) => Promise<boolean>;
  dosen: (where?: DosenWhereInput) => Promise<boolean>;
  jurusan: (where?: JurusanWhereInput) => Promise<boolean>;
  kelas: (where?: KelasWhereInput) => Promise<boolean>;
  mahasiswa: (where?: MahasiswaWhereInput) => Promise<boolean>;
  mataKuliah: (where?: MataKuliahWhereInput) => Promise<boolean>;
  prodi: (where?: ProdiWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  admin: (where: AdminWhereUniqueInput) => Admin;
  admins: (args?: {
    where?: AdminWhereInput;
    orderBy?: AdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<AdminNode>>;
  adminsConnection: (args?: {
    where?: AdminWhereInput;
    orderBy?: AdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AdminConnection;
  angkatan: (where: AngkatanWhereUniqueInput) => Angkatan;
  angkatans: (args?: {
    where?: AngkatanWhereInput;
    orderBy?: AngkatanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<AngkatanNode>>;
  angkatansConnection: (args?: {
    where?: AngkatanWhereInput;
    orderBy?: AngkatanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AngkatanConnection;
  dosen: (where: DosenWhereUniqueInput) => Dosen;
  dosens: (args?: {
    where?: DosenWhereInput;
    orderBy?: DosenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<DosenNode>>;
  dosensConnection: (args?: {
    where?: DosenWhereInput;
    orderBy?: DosenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DosenConnection;
  jurusan: (where: JurusanWhereUniqueInput) => Jurusan;
  jurusans: (args?: {
    where?: JurusanWhereInput;
    orderBy?: JurusanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<JurusanNode>>;
  jurusansConnection: (args?: {
    where?: JurusanWhereInput;
    orderBy?: JurusanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JurusanConnection;
  kelas: (where: KelasWhereUniqueInput) => Kelas;
  kelases: (args?: {
    where?: KelasWhereInput;
    orderBy?: KelasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<KelasNode>>;
  kelasesConnection: (args?: {
    where?: KelasWhereInput;
    orderBy?: KelasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => KelasConnection;
  mahasiswa: (where: MahasiswaWhereUniqueInput) => Mahasiswa;
  mahasiswas: (args?: {
    where?: MahasiswaWhereInput;
    orderBy?: MahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<MahasiswaNode>>;
  mahasiswasConnection: (args?: {
    where?: MahasiswaWhereInput;
    orderBy?: MahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MahasiswaConnection;
  mataKuliah: (where: MataKuliahWhereUniqueInput) => MataKuliah;
  mataKuliahs: (args?: {
    where?: MataKuliahWhereInput;
    orderBy?: MataKuliahOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<MataKuliahNode>>;
  mataKuliahsConnection: (args?: {
    where?: MataKuliahWhereInput;
    orderBy?: MataKuliahOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MataKuliahConnection;
  prodi: (where: ProdiWhereUniqueInput) => Prodi;
  prodis: (args?: {
    where?: ProdiWhereInput;
    orderBy?: ProdiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<ProdiNode>>;
  prodisConnection: (args?: {
    where?: ProdiWhereInput;
    orderBy?: ProdiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProdiConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<UserNode>>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAdmin: (data: AdminCreateInput) => Admin;
  updateAdmin: (args: {
    data: AdminUpdateInput;
    where: AdminWhereUniqueInput;
  }) => Admin;
  updateManyAdmins: (args: {
    data: AdminUpdateInput;
    where?: AdminWhereInput;
  }) => BatchPayload;
  upsertAdmin: (args: {
    where: AdminWhereUniqueInput;
    create: AdminCreateInput;
    update: AdminUpdateInput;
  }) => Admin;
  deleteAdmin: (where: AdminWhereUniqueInput) => Admin;
  deleteManyAdmins: (where?: AdminWhereInput) => BatchPayload;
  createAngkatan: (data: AngkatanCreateInput) => Angkatan;
  updateAngkatan: (args: {
    data: AngkatanUpdateInput;
    where: AngkatanWhereUniqueInput;
  }) => Angkatan;
  updateManyAngkatans: (args: {
    data: AngkatanUpdateInput;
    where?: AngkatanWhereInput;
  }) => BatchPayload;
  upsertAngkatan: (args: {
    where: AngkatanWhereUniqueInput;
    create: AngkatanCreateInput;
    update: AngkatanUpdateInput;
  }) => Angkatan;
  deleteAngkatan: (where: AngkatanWhereUniqueInput) => Angkatan;
  deleteManyAngkatans: (where?: AngkatanWhereInput) => BatchPayload;
  createDosen: (data: DosenCreateInput) => Dosen;
  updateDosen: (args: {
    data: DosenUpdateInput;
    where: DosenWhereUniqueInput;
  }) => Dosen;
  updateManyDosens: (args: {
    data: DosenUpdateInput;
    where?: DosenWhereInput;
  }) => BatchPayload;
  upsertDosen: (args: {
    where: DosenWhereUniqueInput;
    create: DosenCreateInput;
    update: DosenUpdateInput;
  }) => Dosen;
  deleteDosen: (where: DosenWhereUniqueInput) => Dosen;
  deleteManyDosens: (where?: DosenWhereInput) => BatchPayload;
  createJurusan: (data: JurusanCreateInput) => Jurusan;
  updateJurusan: (args: {
    data: JurusanUpdateInput;
    where: JurusanWhereUniqueInput;
  }) => Jurusan;
  updateManyJurusans: (args: {
    data: JurusanUpdateInput;
    where?: JurusanWhereInput;
  }) => BatchPayload;
  upsertJurusan: (args: {
    where: JurusanWhereUniqueInput;
    create: JurusanCreateInput;
    update: JurusanUpdateInput;
  }) => Jurusan;
  deleteJurusan: (where: JurusanWhereUniqueInput) => Jurusan;
  deleteManyJurusans: (where?: JurusanWhereInput) => BatchPayload;
  createKelas: (data: KelasCreateInput) => Kelas;
  updateKelas: (args: {
    data: KelasUpdateInput;
    where: KelasWhereUniqueInput;
  }) => Kelas;
  updateManyKelases: (args: {
    data: KelasUpdateInput;
    where?: KelasWhereInput;
  }) => BatchPayload;
  upsertKelas: (args: {
    where: KelasWhereUniqueInput;
    create: KelasCreateInput;
    update: KelasUpdateInput;
  }) => Kelas;
  deleteKelas: (where: KelasWhereUniqueInput) => Kelas;
  deleteManyKelases: (where?: KelasWhereInput) => BatchPayload;
  createMahasiswa: (data: MahasiswaCreateInput) => Mahasiswa;
  updateMahasiswa: (args: {
    data: MahasiswaUpdateInput;
    where: MahasiswaWhereUniqueInput;
  }) => Mahasiswa;
  updateManyMahasiswas: (args: {
    data: MahasiswaUpdateInput;
    where?: MahasiswaWhereInput;
  }) => BatchPayload;
  upsertMahasiswa: (args: {
    where: MahasiswaWhereUniqueInput;
    create: MahasiswaCreateInput;
    update: MahasiswaUpdateInput;
  }) => Mahasiswa;
  deleteMahasiswa: (where: MahasiswaWhereUniqueInput) => Mahasiswa;
  deleteManyMahasiswas: (where?: MahasiswaWhereInput) => BatchPayload;
  createMataKuliah: (data: MataKuliahCreateInput) => MataKuliah;
  updateMataKuliah: (args: {
    data: MataKuliahUpdateInput;
    where: MataKuliahWhereUniqueInput;
  }) => MataKuliah;
  updateManyMataKuliahs: (args: {
    data: MataKuliahUpdateInput;
    where?: MataKuliahWhereInput;
  }) => BatchPayload;
  upsertMataKuliah: (args: {
    where: MataKuliahWhereUniqueInput;
    create: MataKuliahCreateInput;
    update: MataKuliahUpdateInput;
  }) => MataKuliah;
  deleteMataKuliah: (where: MataKuliahWhereUniqueInput) => MataKuliah;
  deleteManyMataKuliahs: (where?: MataKuliahWhereInput) => BatchPayload;
  createProdi: (data: ProdiCreateInput) => Prodi;
  updateProdi: (args: {
    data: ProdiUpdateInput;
    where: ProdiWhereUniqueInput;
  }) => Prodi;
  updateManyProdis: (args: {
    data: ProdiUpdateInput;
    where?: ProdiWhereInput;
  }) => BatchPayload;
  upsertProdi: (args: {
    where: ProdiWhereUniqueInput;
    create: ProdiCreateInput;
    update: ProdiUpdateInput;
  }) => Prodi;
  deleteProdi: (where: ProdiWhereUniqueInput) => Prodi;
  deleteManyProdis: (where?: ProdiWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => User;
  updateManyUsers: (args: {
    data: UserUpdateInput;
    where?: UserWhereInput;
  }) => BatchPayload;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  admin: (
    where?: AdminSubscriptionWhereInput
  ) => AdminSubscriptionPayloadSubscription;
  angkatan: (
    where?: AngkatanSubscriptionWhereInput
  ) => AngkatanSubscriptionPayloadSubscription;
  dosen: (
    where?: DosenSubscriptionWhereInput
  ) => DosenSubscriptionPayloadSubscription;
  jurusan: (
    where?: JurusanSubscriptionWhereInput
  ) => JurusanSubscriptionPayloadSubscription;
  kelas: (
    where?: KelasSubscriptionWhereInput
  ) => KelasSubscriptionPayloadSubscription;
  mahasiswa: (
    where?: MahasiswaSubscriptionWhereInput
  ) => MahasiswaSubscriptionPayloadSubscription;
  mataKuliah: (
    where?: MataKuliahSubscriptionWhereInput
  ) => MataKuliahSubscriptionPayloadSubscription;
  prodi: (
    where?: ProdiSubscriptionWhereInput
  ) => ProdiSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AdminOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type KelasOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProdiOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MataKuliahOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "kode_ASC"
  | "kode_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DosenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nip_ASC"
  | "nip_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MahasiswaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nim_ASC"
  | "nim_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AngkatanOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Permission = "USER" | "ADMIN" | "DOSEN" | "MAHASISWA" | "PENGAWAS";

export type JurusanOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gambar_ASC"
  | "gambar_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "passwordKasih_ASC"
  | "passwordKasih_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface UserUpdateOneRequiredWithoutAdminInput {
  create?: UserCreateWithoutAdminInput;
  update?: UserUpdateWithoutAdminDataInput;
  upsert?: UserUpsertWithoutAdminInput;
  connect?: UserWhereUniqueInput;
}

export type AdminWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface JurusanUpdateOneRequiredWithoutProdisInput {
  create?: JurusanCreateWithoutProdisInput;
  update?: JurusanUpdateWithoutProdisDataInput;
  upsert?: JurusanUpsertWithoutProdisInput;
  connect?: JurusanWhereUniqueInput;
}

export interface KelasWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  prodi?: ProdiWhereInput;
  dosen?: DosenWhereInput;
  mataKuliah?: MataKuliahWhereInput;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  mahasiswas_every?: MahasiswaWhereInput;
  mahasiswas_some?: MahasiswaWhereInput;
  mahasiswas_none?: MahasiswaWhereInput;
  AND?: KelasWhereInput[] | KelasWhereInput;
  OR?: KelasWhereInput[] | KelasWhereInput;
  NOT?: KelasWhereInput[] | KelasWhereInput;
}

export interface JurusanUpdateWithoutProdisDataInput {
  nama?: String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gambar?: String;
  gambar_not?: String;
  gambar_in?: String[] | String;
  gambar_not_in?: String[] | String;
  gambar_lt?: String;
  gambar_lte?: String;
  gambar_gt?: String;
  gambar_gte?: String;
  gambar_contains?: String;
  gambar_not_contains?: String;
  gambar_starts_with?: String;
  gambar_not_starts_with?: String;
  gambar_ends_with?: String;
  gambar_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  passwordKasih?: String;
  passwordKasih_not?: String;
  passwordKasih_in?: String[] | String;
  passwordKasih_not_in?: String[] | String;
  passwordKasih_lt?: String;
  passwordKasih_lte?: String;
  passwordKasih_gt?: String;
  passwordKasih_gte?: String;
  passwordKasih_contains?: String;
  passwordKasih_not_contains?: String;
  passwordKasih_starts_with?: String;
  passwordKasih_not_starts_with?: String;
  passwordKasih_ends_with?: String;
  passwordKasih_not_ends_with?: String;
  admin?: AdminWhereInput;
  mahasiswa?: MahasiswaWhereInput;
  dosen?: DosenWhereInput;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: String;
  resetTokenExpiry_not?: String;
  resetTokenExpiry_in?: String[] | String;
  resetTokenExpiry_not_in?: String[] | String;
  resetTokenExpiry_lt?: String;
  resetTokenExpiry_lte?: String;
  resetTokenExpiry_gt?: String;
  resetTokenExpiry_gte?: String;
  resetTokenExpiry_contains?: String;
  resetTokenExpiry_not_contains?: String;
  resetTokenExpiry_starts_with?: String;
  resetTokenExpiry_not_starts_with?: String;
  resetTokenExpiry_ends_with?: String;
  resetTokenExpiry_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface JurusanUpsertWithoutProdisInput {
  update: JurusanUpdateWithoutProdisDataInput;
  create: JurusanCreateWithoutProdisInput;
}

export interface MahasiswaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nim?: String;
  nim_not?: String;
  nim_in?: String[] | String;
  nim_not_in?: String[] | String;
  nim_lt?: String;
  nim_lte?: String;
  nim_gt?: String;
  nim_gte?: String;
  nim_contains?: String;
  nim_not_contains?: String;
  nim_starts_with?: String;
  nim_not_starts_with?: String;
  nim_ends_with?: String;
  nim_not_ends_with?: String;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  prodi?: ProdiWhereInput;
  user?: UserWhereInput;
  kelases_every?: KelasWhereInput;
  kelases_some?: KelasWhereInput;
  kelases_none?: KelasWhereInput;
  angkatan?: AngkatanWhereInput;
  AND?: MahasiswaWhereInput[] | MahasiswaWhereInput;
  OR?: MahasiswaWhereInput[] | MahasiswaWhereInput;
  NOT?: MahasiswaWhereInput[] | MahasiswaWhereInput;
}

export interface ProdiUpsertNestedInput {
  update: ProdiUpdateDataInput;
  create: ProdiCreateInput;
}

export interface MataKuliahWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  kode?: String;
  kode_not?: String;
  kode_in?: String[] | String;
  kode_not_in?: String[] | String;
  kode_lt?: String;
  kode_lte?: String;
  kode_gt?: String;
  kode_gte?: String;
  kode_contains?: String;
  kode_not_contains?: String;
  kode_starts_with?: String;
  kode_not_starts_with?: String;
  kode_ends_with?: String;
  kode_not_ends_with?: String;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  prodi?: ProdiWhereInput;
  dosens_every?: DosenWhereInput;
  dosens_some?: DosenWhereInput;
  dosens_none?: DosenWhereInput;
  kelases_every?: KelasWhereInput;
  kelases_some?: KelasWhereInput;
  kelases_none?: KelasWhereInput;
  AND?: MataKuliahWhereInput[] | MataKuliahWhereInput;
  OR?: MataKuliahWhereInput[] | MataKuliahWhereInput;
  NOT?: MataKuliahWhereInput[] | MataKuliahWhereInput;
}

export interface MataKuliahCreateManyWithoutDosensInput {
  create?:
    | MataKuliahCreateWithoutDosensInput[]
    | MataKuliahCreateWithoutDosensInput;
  connect?: MataKuliahWhereUniqueInput[] | MataKuliahWhereUniqueInput;
}

export interface UserUpsertWithoutMahasiswaInput {
  update: UserUpdateWithoutMahasiswaDataInput;
  create: UserCreateWithoutMahasiswaInput;
}

export interface MataKuliahCreateWithoutDosensInput {
  kode: String;
  nama: String;
  prodi: ProdiCreateOneInput;
  kelases?: KelasCreateManyWithoutMataKuliahInput;
}

export interface KelasUpdateManyWithoutMahasiswasInput {
  create?:
    | KelasCreateWithoutMahasiswasInput[]
    | KelasCreateWithoutMahasiswasInput;
  delete?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
  connect?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
  disconnect?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
  update?:
    | KelasUpdateWithWhereUniqueWithoutMahasiswasInput[]
    | KelasUpdateWithWhereUniqueWithoutMahasiswasInput;
  upsert?:
    | KelasUpsertWithWhereUniqueWithoutMahasiswasInput[]
    | KelasUpsertWithWhereUniqueWithoutMahasiswasInput;
}

export interface KelasCreateManyWithoutMataKuliahInput {
  create?:
    | KelasCreateWithoutMataKuliahInput[]
    | KelasCreateWithoutMataKuliahInput;
  connect?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface KelasCreateWithoutMataKuliahInput {
  prodi: ProdiCreateOneInput;
  dosen?: DosenCreateOneWithoutKelasesInput;
  nama: String;
  mahasiswas?: MahasiswaCreateManyWithoutKelasesInput;
}

export interface ProdiSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ProdiWhereInput;
  AND?: ProdiSubscriptionWhereInput[] | ProdiSubscriptionWhereInput;
  OR?: ProdiSubscriptionWhereInput[] | ProdiSubscriptionWhereInput;
  NOT?: ProdiSubscriptionWhereInput[] | ProdiSubscriptionWhereInput;
}

export interface MahasiswaCreateManyWithoutKelasesInput {
  create?:
    | MahasiswaCreateWithoutKelasesInput[]
    | MahasiswaCreateWithoutKelasesInput;
  connect?: MahasiswaWhereUniqueInput[] | MahasiswaWhereUniqueInput;
}

export interface MahasiswaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MahasiswaWhereInput;
  AND?: MahasiswaSubscriptionWhereInput[] | MahasiswaSubscriptionWhereInput;
  OR?: MahasiswaSubscriptionWhereInput[] | MahasiswaSubscriptionWhereInput;
  NOT?: MahasiswaSubscriptionWhereInput[] | MahasiswaSubscriptionWhereInput;
}

export interface MahasiswaCreateWithoutKelasesInput {
  nim: String;
  nama: String;
  prodi: ProdiCreateOneInput;
  user: UserCreateOneWithoutMahasiswaInput;
  angkatan: AngkatanCreateOneInput;
}

export interface JurusanSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: JurusanWhereInput;
  AND?: JurusanSubscriptionWhereInput[] | JurusanSubscriptionWhereInput;
  OR?: JurusanSubscriptionWhereInput[] | JurusanSubscriptionWhereInput;
  NOT?: JurusanSubscriptionWhereInput[] | JurusanSubscriptionWhereInput;
}

export interface UserCreateOneWithoutMahasiswaInput {
  create?: UserCreateWithoutMahasiswaInput;
  connect?: UserWhereUniqueInput;
}

export interface AngkatanSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AngkatanWhereInput;
  AND?: AngkatanSubscriptionWhereInput[] | AngkatanSubscriptionWhereInput;
  OR?: AngkatanSubscriptionWhereInput[] | AngkatanSubscriptionWhereInput;
  NOT?: AngkatanSubscriptionWhereInput[] | AngkatanSubscriptionWhereInput;
}

export interface UserCreateWithoutMahasiswaInput {
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions?: UserCreatepermissionsInput;
  admin?: AdminCreateOneWithoutUserInput;
  dosen?: DosenCreateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export type AngkatanWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  nama?: String;
}>;

export interface DosenCreateOneWithoutUserInput {
  create?: DosenCreateWithoutUserInput;
  connect?: DosenWhereUniqueInput;
}

export interface UserCreateInput {
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions?: UserCreatepermissionsInput;
  admin?: AdminCreateOneWithoutUserInput;
  mahasiswa?: MahasiswaCreateOneWithoutUserInput;
  dosen?: DosenCreateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface DosenCreateWithoutUserInput {
  nip: String;
  nama: String;
  prodi: ProdiCreateOneInput;
  mataKuliahs?: MataKuliahCreateManyWithoutDosensInput;
  kelases?: KelasCreateManyWithoutDosenInput;
}

export interface MataKuliahUpdateInput {
  kode?: String;
  nama?: String;
  prodi?: ProdiUpdateOneRequiredInput;
  dosens?: DosenUpdateManyWithoutMataKuliahsInput;
  kelases?: KelasUpdateManyWithoutMataKuliahInput;
}

export interface KelasCreateManyWithoutDosenInput {
  create?: KelasCreateWithoutDosenInput[] | KelasCreateWithoutDosenInput;
  connect?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
}

export interface MataKuliahCreateInput {
  kode: String;
  nama: String;
  prodi: ProdiCreateOneInput;
  dosens?: DosenCreateManyWithoutMataKuliahsInput;
  kelases?: KelasCreateManyWithoutMataKuliahInput;
}

export interface KelasCreateWithoutDosenInput {
  prodi: ProdiCreateOneInput;
  mataKuliah?: MataKuliahCreateOneWithoutKelasesInput;
  nama: String;
  mahasiswas?: MahasiswaCreateManyWithoutKelasesInput;
}

export interface MahasiswaCreateInput {
  nim: String;
  nama: String;
  prodi: ProdiCreateOneInput;
  user: UserCreateOneWithoutMahasiswaInput;
  kelases?: KelasCreateManyWithoutMahasiswasInput;
  angkatan: AngkatanCreateOneInput;
}

export interface MataKuliahCreateOneWithoutKelasesInput {
  create?: MataKuliahCreateWithoutKelasesInput;
  connect?: MataKuliahWhereUniqueInput;
}

export interface KelasUpdateInput {
  prodi?: ProdiUpdateOneRequiredInput;
  dosen?: DosenUpdateOneWithoutKelasesInput;
  mataKuliah?: MataKuliahUpdateOneWithoutKelasesInput;
  nama?: String;
  mahasiswas?: MahasiswaUpdateManyWithoutKelasesInput;
}

export interface MataKuliahCreateWithoutKelasesInput {
  kode: String;
  nama: String;
  prodi: ProdiCreateOneInput;
  dosens?: DosenCreateManyWithoutMataKuliahsInput;
}

export interface ProdiUpsertWithWhereUniqueWithoutJurusanInput {
  where: ProdiWhereUniqueInput;
  update: ProdiUpdateWithoutJurusanDataInput;
  create: ProdiCreateWithoutJurusanInput;
}

export interface DosenCreateManyWithoutMataKuliahsInput {
  create?:
    | DosenCreateWithoutMataKuliahsInput[]
    | DosenCreateWithoutMataKuliahsInput;
  connect?: DosenWhereUniqueInput[] | DosenWhereUniqueInput;
}

export type KelasWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DosenCreateWithoutMataKuliahsInput {
  nip: String;
  nama: String;
  user: UserCreateOneWithoutDosenInput;
  prodi: ProdiCreateOneInput;
  kelases?: KelasCreateManyWithoutDosenInput;
}

export interface ProdiUpdateManyWithoutJurusanInput {
  create?: ProdiCreateWithoutJurusanInput[] | ProdiCreateWithoutJurusanInput;
  delete?: ProdiWhereUniqueInput[] | ProdiWhereUniqueInput;
  connect?: ProdiWhereUniqueInput[] | ProdiWhereUniqueInput;
  disconnect?: ProdiWhereUniqueInput[] | ProdiWhereUniqueInput;
  update?:
    | ProdiUpdateWithWhereUniqueWithoutJurusanInput[]
    | ProdiUpdateWithWhereUniqueWithoutJurusanInput;
  upsert?:
    | ProdiUpsertWithWhereUniqueWithoutJurusanInput[]
    | ProdiUpsertWithWhereUniqueWithoutJurusanInput;
}

export interface AngkatanCreateOneInput {
  create?: AngkatanCreateInput;
  connect?: AngkatanWhereUniqueInput;
}

export type MahasiswaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  nim?: String;
}>;

export interface AngkatanCreateInput {
  nama: String;
}

export interface ProdiCreateManyWithoutJurusanInput {
  create?: ProdiCreateWithoutJurusanInput[] | ProdiCreateWithoutJurusanInput;
  connect?: ProdiWhereUniqueInput[] | ProdiWhereUniqueInput;
}

export interface AdminUpdateInput {
  nama?: String;
  user?: UserUpdateOneRequiredWithoutAdminInput;
}

export type MataKuliahWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  kode?: String;
}>;

export interface AngkatanUpsertNestedInput {
  update: AngkatanUpdateDataInput;
  create: AngkatanCreateInput;
}

export interface DosenCreateInput {
  nip: String;
  nama: String;
  user: UserCreateOneWithoutDosenInput;
  prodi: ProdiCreateOneInput;
  mataKuliahs?: MataKuliahCreateManyWithoutDosensInput;
  kelases?: KelasCreateManyWithoutDosenInput;
}

export interface UserUpdateWithoutAdminDataInput {
  gambar?: String;
  email?: String;
  password?: String;
  passwordKasih?: String;
  permissions?: UserUpdatepermissionsInput;
  mahasiswa?: MahasiswaUpdateOneWithoutUserInput;
  dosen?: DosenUpdateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export type ProdiWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  nama?: String;
}>;

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface MahasiswaUpsertWithoutUserInput {
  update: MahasiswaUpdateWithoutUserDataInput;
  create: MahasiswaCreateWithoutUserInput;
}

export interface MahasiswaUpdateOneWithoutUserInput {
  create?: MahasiswaCreateWithoutUserInput;
  update?: MahasiswaUpdateWithoutUserDataInput;
  upsert?: MahasiswaUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: MahasiswaWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface MahasiswaUpdateWithoutUserDataInput {
  nim?: String;
  nama?: String;
  prodi?: ProdiUpdateOneRequiredInput;
  kelases?: KelasUpdateManyWithoutMahasiswasInput;
  angkatan?: AngkatanUpdateOneRequiredInput;
}

export interface MataKuliahUpsertWithWhereUniqueWithoutDosensInput {
  where: MataKuliahWhereUniqueInput;
  update: MataKuliahUpdateWithoutDosensDataInput;
  create: MataKuliahCreateWithoutDosensInput;
}

export interface ProdiUpdateOneRequiredInput {
  create?: ProdiCreateInput;
  update?: ProdiUpdateDataInput;
  upsert?: ProdiUpsertNestedInput;
  connect?: ProdiWhereUniqueInput;
}

export interface MahasiswaUpsertWithWhereUniqueWithoutKelasesInput {
  where: MahasiswaWhereUniqueInput;
  update: MahasiswaUpdateWithoutKelasesDataInput;
  create: MahasiswaCreateWithoutKelasesInput;
}

export interface ProdiUpdateDataInput {
  jurusan?: JurusanUpdateOneRequiredWithoutProdisInput;
  nama?: String;
}

export interface AdminCreateInput {
  nama: String;
  user: UserCreateOneWithoutAdminInput;
}

export interface DosenWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nip?: String;
  nip_not?: String;
  nip_in?: String[] | String;
  nip_not_in?: String[] | String;
  nip_lt?: String;
  nip_lte?: String;
  nip_gt?: String;
  nip_gte?: String;
  nip_contains?: String;
  nip_not_contains?: String;
  nip_starts_with?: String;
  nip_not_starts_with?: String;
  nip_ends_with?: String;
  nip_not_ends_with?: String;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  user?: UserWhereInput;
  prodi?: ProdiWhereInput;
  mataKuliahs_every?: MataKuliahWhereInput;
  mataKuliahs_some?: MataKuliahWhereInput;
  mataKuliahs_none?: MataKuliahWhereInput;
  kelases_every?: KelasWhereInput;
  kelases_some?: KelasWhereInput;
  kelases_none?: KelasWhereInput;
  AND?: DosenWhereInput[] | DosenWhereInput;
  OR?: DosenWhereInput[] | DosenWhereInput;
  NOT?: DosenWhereInput[] | DosenWhereInput;
}

export interface UserCreateWithoutAdminInput {
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions?: UserCreatepermissionsInput;
  mahasiswa?: MahasiswaCreateOneWithoutUserInput;
  dosen?: DosenCreateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface AdminWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: AdminWhereInput[] | AdminWhereInput;
  OR?: AdminWhereInput[] | AdminWhereInput;
  NOT?: AdminWhereInput[] | AdminWhereInput;
}

export interface MahasiswaCreateOneWithoutUserInput {
  create?: MahasiswaCreateWithoutUserInput;
  connect?: MahasiswaWhereUniqueInput;
}

export interface AngkatanWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  AND?: AngkatanWhereInput[] | AngkatanWhereInput;
  OR?: AngkatanWhereInput[] | AngkatanWhereInput;
  NOT?: AngkatanWhereInput[] | AngkatanWhereInput;
}

export interface ProdiCreateOneInput {
  create?: ProdiCreateInput;
  connect?: ProdiWhereUniqueInput;
}

export interface AngkatanUpdateDataInput {
  nama?: String;
}

export interface JurusanCreateOneWithoutProdisInput {
  create?: JurusanCreateWithoutProdisInput;
  connect?: JurusanWhereUniqueInput;
}

export interface AngkatanUpdateOneRequiredInput {
  create?: AngkatanCreateInput;
  update?: AngkatanUpdateDataInput;
  upsert?: AngkatanUpsertNestedInput;
  connect?: AngkatanWhereUniqueInput;
}

export interface KelasCreateManyWithoutMahasiswasInput {
  create?:
    | KelasCreateWithoutMahasiswasInput[]
    | KelasCreateWithoutMahasiswasInput;
  connect?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
}

export interface KelasUpdateWithWhereUniqueWithoutMahasiswasInput {
  where: KelasWhereUniqueInput;
  data: KelasUpdateWithoutMahasiswasDataInput;
}

export interface DosenCreateOneWithoutKelasesInput {
  create?: DosenCreateWithoutKelasesInput;
  connect?: DosenWhereUniqueInput;
}

export interface KelasUpdateWithoutMahasiswasDataInput {
  prodi?: ProdiUpdateOneRequiredInput;
  dosen?: DosenUpdateOneWithoutKelasesInput;
  mataKuliah?: MataKuliahUpdateOneWithoutKelasesInput;
  nama?: String;
}

export interface UserCreateOneWithoutDosenInput {
  create?: UserCreateWithoutDosenInput;
  connect?: UserWhereUniqueInput;
}

export interface DosenUpdateOneWithoutKelasesInput {
  create?: DosenCreateWithoutKelasesInput;
  update?: DosenUpdateWithoutKelasesDataInput;
  upsert?: DosenUpsertWithoutKelasesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: DosenWhereUniqueInput;
}

export interface AdminCreateOneWithoutUserInput {
  create?: AdminCreateWithoutUserInput;
  connect?: AdminWhereUniqueInput;
}

export interface DosenUpdateWithoutKelasesDataInput {
  nip?: String;
  nama?: String;
  user?: UserUpdateOneRequiredWithoutDosenInput;
  prodi?: ProdiUpdateOneRequiredInput;
  mataKuliahs?: MataKuliahUpdateManyWithoutDosensInput;
}

export interface JurusanWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  prodis_every?: ProdiWhereInput;
  prodis_some?: ProdiWhereInput;
  prodis_none?: ProdiWhereInput;
  AND?: JurusanWhereInput[] | JurusanWhereInput;
  OR?: JurusanWhereInput[] | JurusanWhereInput;
  NOT?: JurusanWhereInput[] | JurusanWhereInput;
}

export interface UserUpdateOneRequiredWithoutDosenInput {
  create?: UserCreateWithoutDosenInput;
  update?: UserUpdateWithoutDosenDataInput;
  upsert?: UserUpsertWithoutDosenInput;
  connect?: UserWhereUniqueInput;
}

export interface MataKuliahSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MataKuliahWhereInput;
  AND?: MataKuliahSubscriptionWhereInput[] | MataKuliahSubscriptionWhereInput;
  OR?: MataKuliahSubscriptionWhereInput[] | MataKuliahSubscriptionWhereInput;
  NOT?: MataKuliahSubscriptionWhereInput[] | MataKuliahSubscriptionWhereInput;
}

export interface UserUpdateWithoutDosenDataInput {
  gambar?: String;
  email?: String;
  password?: String;
  passwordKasih?: String;
  permissions?: UserUpdatepermissionsInput;
  admin?: AdminUpdateOneWithoutUserInput;
  mahasiswa?: MahasiswaUpdateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface DosenSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DosenWhereInput;
  AND?: DosenSubscriptionWhereInput[] | DosenSubscriptionWhereInput;
  OR?: DosenSubscriptionWhereInput[] | DosenSubscriptionWhereInput;
  NOT?: DosenSubscriptionWhereInput[] | DosenSubscriptionWhereInput;
}

export interface AdminUpdateOneWithoutUserInput {
  create?: AdminCreateWithoutUserInput;
  update?: AdminUpdateWithoutUserDataInput;
  upsert?: AdminUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: AdminWhereUniqueInput;
}

export interface UserUpdateInput {
  gambar?: String;
  email?: String;
  password?: String;
  passwordKasih?: String;
  permissions?: UserUpdatepermissionsInput;
  admin?: AdminUpdateOneWithoutUserInput;
  mahasiswa?: MahasiswaUpdateOneWithoutUserInput;
  dosen?: DosenUpdateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface AdminUpdateWithoutUserDataInput {
  nama?: String;
}

export type DosenWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  nip?: String;
}>;

export interface AdminUpsertWithoutUserInput {
  update: AdminUpdateWithoutUserDataInput;
  create: AdminCreateWithoutUserInput;
}

export type JurusanWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpsertWithoutDosenInput {
  update: UserUpdateWithoutDosenDataInput;
  create: UserCreateWithoutDosenInput;
}

export interface ProdiUpdateWithoutJurusanDataInput {
  nama?: String;
}

export interface MataKuliahUpdateManyWithoutDosensInput {
  create?:
    | MataKuliahCreateWithoutDosensInput[]
    | MataKuliahCreateWithoutDosensInput;
  delete?: MataKuliahWhereUniqueInput[] | MataKuliahWhereUniqueInput;
  connect?: MataKuliahWhereUniqueInput[] | MataKuliahWhereUniqueInput;
  disconnect?: MataKuliahWhereUniqueInput[] | MataKuliahWhereUniqueInput;
  update?:
    | MataKuliahUpdateWithWhereUniqueWithoutDosensInput[]
    | MataKuliahUpdateWithWhereUniqueWithoutDosensInput;
  upsert?:
    | MataKuliahUpsertWithWhereUniqueWithoutDosensInput[]
    | MataKuliahUpsertWithWhereUniqueWithoutDosensInput;
}

export interface JurusanUpdateInput {
  nama?: String;
  prodis?: ProdiUpdateManyWithoutJurusanInput;
}

export interface MataKuliahUpdateWithWhereUniqueWithoutDosensInput {
  where: MataKuliahWhereUniqueInput;
  data: MataKuliahUpdateWithoutDosensDataInput;
}

export interface JurusanCreateInput {
  nama: String;
  prodis?: ProdiCreateManyWithoutJurusanInput;
}

export interface MataKuliahUpdateWithoutDosensDataInput {
  kode?: String;
  nama?: String;
  prodi?: ProdiUpdateOneRequiredInput;
  kelases?: KelasUpdateManyWithoutMataKuliahInput;
}

export interface AngkatanUpdateInput {
  nama?: String;
}

export interface KelasUpdateManyWithoutMataKuliahInput {
  create?:
    | KelasCreateWithoutMataKuliahInput[]
    | KelasCreateWithoutMataKuliahInput;
  delete?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
  connect?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
  disconnect?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
  update?:
    | KelasUpdateWithWhereUniqueWithoutMataKuliahInput[]
    | KelasUpdateWithWhereUniqueWithoutMataKuliahInput;
  upsert?:
    | KelasUpsertWithWhereUniqueWithoutMataKuliahInput[]
    | KelasUpsertWithWhereUniqueWithoutMataKuliahInput;
}

export interface KelasUpsertWithWhereUniqueWithoutMahasiswasInput {
  where: KelasWhereUniqueInput;
  update: KelasUpdateWithoutMahasiswasDataInput;
  create: KelasCreateWithoutMahasiswasInput;
}

export interface KelasUpdateWithWhereUniqueWithoutMataKuliahInput {
  where: KelasWhereUniqueInput;
  data: KelasUpdateWithoutMataKuliahDataInput;
}

export interface KelasUpsertWithWhereUniqueWithoutMataKuliahInput {
  where: KelasWhereUniqueInput;
  update: KelasUpdateWithoutMataKuliahDataInput;
  create: KelasCreateWithoutMataKuliahInput;
}

export interface KelasUpdateWithoutMataKuliahDataInput {
  prodi?: ProdiUpdateOneRequiredInput;
  dosen?: DosenUpdateOneWithoutKelasesInput;
  nama?: String;
  mahasiswas?: MahasiswaUpdateManyWithoutKelasesInput;
}

export interface UserCreateOneWithoutAdminInput {
  create?: UserCreateWithoutAdminInput;
  connect?: UserWhereUniqueInput;
}

export interface MahasiswaUpdateManyWithoutKelasesInput {
  create?:
    | MahasiswaCreateWithoutKelasesInput[]
    | MahasiswaCreateWithoutKelasesInput;
  delete?: MahasiswaWhereUniqueInput[] | MahasiswaWhereUniqueInput;
  connect?: MahasiswaWhereUniqueInput[] | MahasiswaWhereUniqueInput;
  disconnect?: MahasiswaWhereUniqueInput[] | MahasiswaWhereUniqueInput;
  update?:
    | MahasiswaUpdateWithWhereUniqueWithoutKelasesInput[]
    | MahasiswaUpdateWithWhereUniqueWithoutKelasesInput;
  upsert?:
    | MahasiswaUpsertWithWhereUniqueWithoutKelasesInput[]
    | MahasiswaUpsertWithWhereUniqueWithoutKelasesInput;
}

export interface MahasiswaCreateWithoutUserInput {
  nim: String;
  nama: String;
  prodi: ProdiCreateOneInput;
  kelases?: KelasCreateManyWithoutMahasiswasInput;
  angkatan: AngkatanCreateOneInput;
}

export interface MahasiswaUpdateWithWhereUniqueWithoutKelasesInput {
  where: MahasiswaWhereUniqueInput;
  data: MahasiswaUpdateWithoutKelasesDataInput;
}

export interface JurusanCreateWithoutProdisInput {
  nama: String;
}

export interface MahasiswaUpdateWithoutKelasesDataInput {
  nim?: String;
  nama?: String;
  prodi?: ProdiUpdateOneRequiredInput;
  user?: UserUpdateOneRequiredWithoutMahasiswaInput;
  angkatan?: AngkatanUpdateOneRequiredInput;
}

export interface DosenCreateWithoutKelasesInput {
  nip: String;
  nama: String;
  user: UserCreateOneWithoutDosenInput;
  prodi: ProdiCreateOneInput;
  mataKuliahs?: MataKuliahCreateManyWithoutDosensInput;
}

export interface UserUpdateOneRequiredWithoutMahasiswaInput {
  create?: UserCreateWithoutMahasiswaInput;
  update?: UserUpdateWithoutMahasiswaDataInput;
  upsert?: UserUpsertWithoutMahasiswaInput;
  connect?: UserWhereUniqueInput;
}

export interface AdminCreateWithoutUserInput {
  nama: String;
}

export interface UserUpdateWithoutMahasiswaDataInput {
  gambar?: String;
  email?: String;
  password?: String;
  passwordKasih?: String;
  permissions?: UserUpdatepermissionsInput;
  admin?: AdminUpdateOneWithoutUserInput;
  dosen?: DosenUpdateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface KelasSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: KelasWhereInput;
  AND?: KelasSubscriptionWhereInput[] | KelasSubscriptionWhereInput;
  OR?: KelasSubscriptionWhereInput[] | KelasSubscriptionWhereInput;
  NOT?: KelasSubscriptionWhereInput[] | KelasSubscriptionWhereInput;
}

export interface DosenUpdateOneWithoutUserInput {
  create?: DosenCreateWithoutUserInput;
  update?: DosenUpdateWithoutUserDataInput;
  upsert?: DosenUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: DosenWhereUniqueInput;
}

export interface ProdiUpdateInput {
  jurusan?: JurusanUpdateOneRequiredWithoutProdisInput;
  nama?: String;
}

export interface DosenUpdateWithoutUserDataInput {
  nip?: String;
  nama?: String;
  prodi?: ProdiUpdateOneRequiredInput;
  mataKuliahs?: MataKuliahUpdateManyWithoutDosensInput;
  kelases?: KelasUpdateManyWithoutDosenInput;
}

export interface KelasCreateInput {
  prodi: ProdiCreateOneInput;
  dosen?: DosenCreateOneWithoutKelasesInput;
  mataKuliah?: MataKuliahCreateOneWithoutKelasesInput;
  nama: String;
  mahasiswas?: MahasiswaCreateManyWithoutKelasesInput;
}

export interface KelasUpdateManyWithoutDosenInput {
  create?: KelasCreateWithoutDosenInput[] | KelasCreateWithoutDosenInput;
  delete?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
  connect?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
  disconnect?: KelasWhereUniqueInput[] | KelasWhereUniqueInput;
  update?:
    | KelasUpdateWithWhereUniqueWithoutDosenInput[]
    | KelasUpdateWithWhereUniqueWithoutDosenInput;
  upsert?:
    | KelasUpsertWithWhereUniqueWithoutDosenInput[]
    | KelasUpsertWithWhereUniqueWithoutDosenInput;
}

export interface ProdiCreateWithoutJurusanInput {
  nama: String;
}

export interface KelasUpdateWithWhereUniqueWithoutDosenInput {
  where: KelasWhereUniqueInput;
  data: KelasUpdateWithoutDosenDataInput;
}

export interface UserUpsertWithoutAdminInput {
  update: UserUpdateWithoutAdminDataInput;
  create: UserCreateWithoutAdminInput;
}

export interface KelasUpdateWithoutDosenDataInput {
  prodi?: ProdiUpdateOneRequiredInput;
  mataKuliah?: MataKuliahUpdateOneWithoutKelasesInput;
  nama?: String;
  mahasiswas?: MahasiswaUpdateManyWithoutKelasesInput;
}

export interface ProdiCreateInput {
  jurusan: JurusanCreateOneWithoutProdisInput;
  nama: String;
}

export interface MataKuliahUpdateOneWithoutKelasesInput {
  create?: MataKuliahCreateWithoutKelasesInput;
  update?: MataKuliahUpdateWithoutKelasesDataInput;
  upsert?: MataKuliahUpsertWithoutKelasesInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: MataKuliahWhereUniqueInput;
}

export interface UserCreateWithoutDosenInput {
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions?: UserCreatepermissionsInput;
  admin?: AdminCreateOneWithoutUserInput;
  mahasiswa?: MahasiswaCreateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface MataKuliahUpdateWithoutKelasesDataInput {
  kode?: String;
  nama?: String;
  prodi?: ProdiUpdateOneRequiredInput;
  dosens?: DosenUpdateManyWithoutMataKuliahsInput;
}

export interface AdminSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AdminWhereInput;
  AND?: AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput;
  OR?: AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput;
  NOT?: AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput;
}

export interface DosenUpdateManyWithoutMataKuliahsInput {
  create?:
    | DosenCreateWithoutMataKuliahsInput[]
    | DosenCreateWithoutMataKuliahsInput;
  delete?: DosenWhereUniqueInput[] | DosenWhereUniqueInput;
  connect?: DosenWhereUniqueInput[] | DosenWhereUniqueInput;
  disconnect?: DosenWhereUniqueInput[] | DosenWhereUniqueInput;
  update?:
    | DosenUpdateWithWhereUniqueWithoutMataKuliahsInput[]
    | DosenUpdateWithWhereUniqueWithoutMataKuliahsInput;
  upsert?:
    | DosenUpsertWithWhereUniqueWithoutMataKuliahsInput[]
    | DosenUpsertWithWhereUniqueWithoutMataKuliahsInput;
}

export interface ProdiUpdateWithWhereUniqueWithoutJurusanInput {
  where: ProdiWhereUniqueInput;
  data: ProdiUpdateWithoutJurusanDataInput;
}

export interface DosenUpdateWithWhereUniqueWithoutMataKuliahsInput {
  where: DosenWhereUniqueInput;
  data: DosenUpdateWithoutMataKuliahsDataInput;
}

export interface DosenUpsertWithoutKelasesInput {
  update: DosenUpdateWithoutKelasesDataInput;
  create: DosenCreateWithoutKelasesInput;
}

export interface DosenUpdateWithoutMataKuliahsDataInput {
  nip?: String;
  nama?: String;
  user?: UserUpdateOneRequiredWithoutDosenInput;
  prodi?: ProdiUpdateOneRequiredInput;
  kelases?: KelasUpdateManyWithoutDosenInput;
}

export interface KelasCreateWithoutMahasiswasInput {
  prodi: ProdiCreateOneInput;
  dosen?: DosenCreateOneWithoutKelasesInput;
  mataKuliah?: MataKuliahCreateOneWithoutKelasesInput;
  nama: String;
}

export interface DosenUpsertWithoutUserInput {
  update: DosenUpdateWithoutUserDataInput;
  create: DosenCreateWithoutUserInput;
}

export interface KelasUpsertWithWhereUniqueWithoutDosenInput {
  where: KelasWhereUniqueInput;
  update: KelasUpdateWithoutDosenDataInput;
  create: KelasCreateWithoutDosenInput;
}

export interface MataKuliahUpsertWithoutKelasesInput {
  update: MataKuliahUpdateWithoutKelasesDataInput;
  create: MataKuliahCreateWithoutKelasesInput;
}

export interface DosenUpsertWithWhereUniqueWithoutMataKuliahsInput {
  where: DosenWhereUniqueInput;
  update: DosenUpdateWithoutMataKuliahsDataInput;
  create: DosenCreateWithoutMataKuliahsInput;
}

export interface ProdiWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  jurusan?: JurusanWhereInput;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  AND?: ProdiWhereInput[] | ProdiWhereInput;
  OR?: ProdiWhereInput[] | ProdiWhereInput;
  NOT?: ProdiWhereInput[] | ProdiWhereInput;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface DosenUpdateInput {
  nip?: String;
  nama?: String;
  user?: UserUpdateOneRequiredWithoutDosenInput;
  prodi?: ProdiUpdateOneRequiredInput;
  mataKuliahs?: MataKuliahUpdateManyWithoutDosensInput;
  kelases?: KelasUpdateManyWithoutDosenInput;
}

export interface MahasiswaUpdateInput {
  nim?: String;
  nama?: String;
  prodi?: ProdiUpdateOneRequiredInput;
  user?: UserUpdateOneRequiredWithoutMahasiswaInput;
  kelases?: KelasUpdateManyWithoutMahasiswasInput;
  angkatan?: AngkatanUpdateOneRequiredInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions: Permission[];
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gambar: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  passwordKasih: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gambar: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  passwordKasih: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
}

export interface AngkatanConnectionNode {}

export interface AngkatanConnection
  extends Promise<AngkatanConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<AngkatanEdgeNode>>>() => T;
  aggregate: <T = AggregateAngkatan>() => T;
}

export interface AngkatanConnectionSubscription
  extends Promise<AsyncIterator<AngkatanConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<AngkatanEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateAngkatanSubscription>() => T;
}

export interface KelasNode {
  id: ID_Output;
  nama: String;
}

export interface Kelas extends Promise<KelasNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  prodi: <T = Prodi>() => T;
  dosen: <T = Dosen>() => T;
  mataKuliah: <T = MataKuliah>() => T;
  nama: () => Promise<String>;
  mahasiswas: <T = Promise<Array<MahasiswaNode>>>(args?: {
    where?: MahasiswaWhereInput;
    orderBy?: MahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface KelasSubscription
  extends Promise<AsyncIterator<KelasNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  prodi: <T = ProdiSubscription>() => T;
  dosen: <T = DosenSubscription>() => T;
  mataKuliah: <T = MataKuliahSubscription>() => T;
  nama: () => Promise<AsyncIterator<String>>;
  mahasiswas: <
    T = Promise<AsyncIterator<Array<MahasiswaSubscription>>>
  >(args?: {
    where?: MahasiswaWhereInput;
    orderBy?: MahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MahasiswaNode {
  id: ID_Output;
  nim: String;
  nama: String;
}

export interface Mahasiswa extends Promise<MahasiswaNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  nim: () => Promise<String>;
  nama: () => Promise<String>;
  prodi: <T = Prodi>() => T;
  user: <T = User>() => T;
  kelases: <T = Promise<Array<KelasNode>>>(args?: {
    where?: KelasWhereInput;
    orderBy?: KelasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  angkatan: <T = Angkatan>() => T;
}

export interface MahasiswaSubscription
  extends Promise<AsyncIterator<MahasiswaNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nim: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
  prodi: <T = ProdiSubscription>() => T;
  user: <T = UserSubscription>() => T;
  kelases: <T = Promise<AsyncIterator<Array<KelasSubscription>>>>(args?: {
    where?: KelasWhereInput;
    orderBy?: KelasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  angkatan: <T = AngkatanSubscription>() => T;
}

export interface DosenNode {
  id: ID_Output;
  nip: String;
  nama: String;
}

export interface Dosen extends Promise<DosenNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  nip: () => Promise<String>;
  nama: () => Promise<String>;
  user: <T = User>() => T;
  prodi: <T = Prodi>() => T;
  mataKuliahs: <T = Promise<Array<MataKuliahNode>>>(args?: {
    where?: MataKuliahWhereInput;
    orderBy?: MataKuliahOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  kelases: <T = Promise<Array<KelasNode>>>(args?: {
    where?: KelasWhereInput;
    orderBy?: KelasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DosenSubscription
  extends Promise<AsyncIterator<DosenNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nip: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  prodi: <T = ProdiSubscription>() => T;
  mataKuliahs: <
    T = Promise<AsyncIterator<Array<MataKuliahSubscription>>>
  >(args?: {
    where?: MataKuliahWhereInput;
    orderBy?: MataKuliahOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  kelases: <T = Promise<AsyncIterator<Array<KelasSubscription>>>>(args?: {
    where?: KelasWhereInput;
    orderBy?: KelasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateAdminNode {
  count: Int;
}

export interface AggregateAdmin
  extends Promise<AggregateAdminNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdminSubscription
  extends Promise<AsyncIterator<AggregateAdminNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProdiSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ProdiSubscriptionPayload
  extends Promise<ProdiSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Prodi>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProdiPreviousValues>() => T;
}

export interface ProdiSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProdiSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProdiSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProdiPreviousValuesSubscription>() => T;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AdminNode {
  id: ID_Output;
  nama: String;
}

export interface Admin extends Promise<AdminNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
  user: <T = User>() => T;
}

export interface AdminSubscription
  extends Promise<AsyncIterator<AdminNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface AggregateProdiNode {
  count: Int;
}

export interface AggregateProdi
  extends Promise<AggregateProdiNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProdiSubscription
  extends Promise<AsyncIterator<AggregateProdiNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProdiConnectionNode {}

export interface ProdiConnection
  extends Promise<ProdiConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<ProdiEdgeNode>>>() => T;
  aggregate: <T = AggregateProdi>() => T;
}

export interface ProdiConnectionSubscription
  extends Promise<AsyncIterator<ProdiConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<ProdiEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateProdiSubscription>() => T;
}

export interface AdminSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AdminSubscriptionPayload
  extends Promise<AdminSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Admin>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdminPreviousValues>() => T;
}

export interface AdminSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdminSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdminSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdminPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AdminPreviousValuesNode {
  id: ID_Output;
  nama: String;
}

export interface AdminPreviousValues
  extends Promise<AdminPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
}

export interface AdminPreviousValuesSubscription
  extends Promise<AsyncIterator<AdminPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface MataKuliahEdgeNode {
  cursor: String;
}

export interface MataKuliahEdge
  extends Promise<MataKuliahEdgeNode>,
    Fragmentable {
  node: <T = MataKuliah>() => T;
  cursor: () => Promise<String>;
}

export interface MataKuliahEdgeSubscription
  extends Promise<AsyncIterator<MataKuliahEdgeNode>>,
    Fragmentable {
  node: <T = MataKuliahSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AdminEdgeNode {
  cursor: String;
}

export interface AdminEdge extends Promise<AdminEdgeNode>, Fragmentable {
  node: <T = Admin>() => T;
  cursor: () => Promise<String>;
}

export interface AdminEdgeSubscription
  extends Promise<AsyncIterator<AdminEdgeNode>>,
    Fragmentable {
  node: <T = AdminSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMahasiswaNode {
  count: Int;
}

export interface AggregateMahasiswa
  extends Promise<AggregateMahasiswaNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMahasiswaSubscription
  extends Promise<AsyncIterator<AggregateMahasiswaNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AngkatanSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AngkatanSubscriptionPayload
  extends Promise<AngkatanSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Angkatan>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AngkatanPreviousValues>() => T;
}

export interface AngkatanSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AngkatanSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AngkatanSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AngkatanPreviousValuesSubscription>() => T;
}

export interface MahasiswaConnectionNode {}

export interface MahasiswaConnection
  extends Promise<MahasiswaConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<MahasiswaEdgeNode>>>() => T;
  aggregate: <T = AggregateMahasiswa>() => T;
}

export interface MahasiswaConnectionSubscription
  extends Promise<AsyncIterator<MahasiswaConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<MahasiswaEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateMahasiswaSubscription>() => T;
}

export interface AngkatanPreviousValuesNode {
  id: ID_Output;
  nama: String;
}

export interface AngkatanPreviousValues
  extends Promise<AngkatanPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
}

export interface AngkatanPreviousValuesSubscription
  extends Promise<AsyncIterator<AngkatanPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface KelasEdgeNode {
  cursor: String;
}

export interface KelasEdge extends Promise<KelasEdgeNode>, Fragmentable {
  node: <T = Kelas>() => T;
  cursor: () => Promise<String>;
}

export interface KelasEdgeSubscription
  extends Promise<AsyncIterator<KelasEdgeNode>>,
    Fragmentable {
  node: <T = KelasSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProdiPreviousValuesNode {
  id: ID_Output;
  nama: String;
}

export interface ProdiPreviousValues
  extends Promise<ProdiPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
}

export interface ProdiPreviousValuesSubscription
  extends Promise<AsyncIterator<ProdiPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface AggregateJurusanNode {
  count: Int;
}

export interface AggregateJurusan
  extends Promise<AggregateJurusanNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJurusanSubscription
  extends Promise<AsyncIterator<AggregateJurusanNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DosenSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface DosenSubscriptionPayload
  extends Promise<DosenSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Dosen>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DosenPreviousValues>() => T;
}

export interface DosenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DosenSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DosenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DosenPreviousValuesSubscription>() => T;
}

export interface JurusanConnectionNode {}

export interface JurusanConnection
  extends Promise<JurusanConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<JurusanEdgeNode>>>() => T;
  aggregate: <T = AggregateJurusan>() => T;
}

export interface JurusanConnectionSubscription
  extends Promise<AsyncIterator<JurusanConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<JurusanEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateJurusanSubscription>() => T;
}

export interface DosenPreviousValuesNode {
  id: ID_Output;
  nip: String;
  nama: String;
}

export interface DosenPreviousValues
  extends Promise<DosenPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nip: () => Promise<String>;
  nama: () => Promise<String>;
}

export interface DosenPreviousValuesSubscription
  extends Promise<AsyncIterator<DosenPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nip: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDosenNode {
  count: Int;
}

export interface AggregateDosen
  extends Promise<AggregateDosenNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDosenSubscription
  extends Promise<AsyncIterator<AggregateDosenNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface DosenConnectionNode {}

export interface DosenConnection
  extends Promise<DosenConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<DosenEdgeNode>>>() => T;
  aggregate: <T = AggregateDosen>() => T;
}

export interface DosenConnectionSubscription
  extends Promise<AsyncIterator<DosenConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<DosenEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateDosenSubscription>() => T;
}

export interface JurusanSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface JurusanSubscriptionPayload
  extends Promise<JurusanSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Jurusan>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JurusanPreviousValues>() => T;
}

export interface JurusanSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JurusanSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JurusanSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JurusanPreviousValuesSubscription>() => T;
}

export interface AngkatanEdgeNode {
  cursor: String;
}

export interface AngkatanEdge extends Promise<AngkatanEdgeNode>, Fragmentable {
  node: <T = Angkatan>() => T;
  cursor: () => Promise<String>;
}

export interface AngkatanEdgeSubscription
  extends Promise<AsyncIterator<AngkatanEdgeNode>>,
    Fragmentable {
  node: <T = AngkatanSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface JurusanPreviousValuesNode {
  id: ID_Output;
  nama: String;
}

export interface JurusanPreviousValues
  extends Promise<JurusanPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
}

export interface JurusanPreviousValuesSubscription
  extends Promise<AsyncIterator<JurusanPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface ProdiEdgeNode {
  cursor: String;
}

export interface ProdiEdge extends Promise<ProdiEdgeNode>, Fragmentable {
  node: <T = Prodi>() => T;
  cursor: () => Promise<String>;
}

export interface ProdiEdgeSubscription
  extends Promise<AsyncIterator<ProdiEdgeNode>>,
    Fragmentable {
  node: <T = ProdiSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AdminConnectionNode {}

export interface AdminConnection
  extends Promise<AdminConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<AdminEdgeNode>>>() => T;
  aggregate: <T = AggregateAdmin>() => T;
}

export interface AdminConnectionSubscription
  extends Promise<AsyncIterator<AdminConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<AdminEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateAdminSubscription>() => T;
}

export interface AggregateMataKuliahNode {
  count: Int;
}

export interface AggregateMataKuliah
  extends Promise<AggregateMataKuliahNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMataKuliahSubscription
  extends Promise<AsyncIterator<AggregateMataKuliahNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface KelasSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface KelasSubscriptionPayload
  extends Promise<KelasSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Kelas>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KelasPreviousValues>() => T;
}

export interface KelasSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KelasSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KelasSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KelasPreviousValuesSubscription>() => T;
}

export interface MahasiswaEdgeNode {
  cursor: String;
}

export interface MahasiswaEdge
  extends Promise<MahasiswaEdgeNode>,
    Fragmentable {
  node: <T = Mahasiswa>() => T;
  cursor: () => Promise<String>;
}

export interface MahasiswaEdgeSubscription
  extends Promise<AsyncIterator<MahasiswaEdgeNode>>,
    Fragmentable {
  node: <T = MahasiswaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface KelasPreviousValuesNode {
  id: ID_Output;
  nama: String;
}

export interface KelasPreviousValues
  extends Promise<KelasPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
}

export interface KelasPreviousValuesSubscription
  extends Promise<AsyncIterator<KelasPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface KelasConnectionNode {}

export interface KelasConnection
  extends Promise<KelasConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<KelasEdgeNode>>>() => T;
  aggregate: <T = AggregateKelas>() => T;
}

export interface KelasConnectionSubscription
  extends Promise<AsyncIterator<KelasConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<KelasEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateKelasSubscription>() => T;
}

export interface ProdiNode {
  id: ID_Output;
  nama: String;
}

export interface Prodi extends Promise<ProdiNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  jurusan: <T = Jurusan>() => T;
  nama: () => Promise<String>;
}

export interface ProdiSubscription
  extends Promise<AsyncIterator<ProdiNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  jurusan: <T = JurusanSubscription>() => T;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface UserNode {
  id: ID_Output;
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions: Permission[];
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  gambar: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  passwordKasih: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  admin: <T = Admin>() => T;
  mahasiswa: <T = Mahasiswa>() => T;
  dosen: <T = Dosen>() => T;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gambar: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  passwordKasih: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  admin: <T = AdminSubscription>() => T;
  mahasiswa: <T = MahasiswaSubscription>() => T;
  dosen: <T = DosenSubscription>() => T;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
}

export interface MahasiswaSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MahasiswaSubscriptionPayload
  extends Promise<MahasiswaSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Mahasiswa>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MahasiswaPreviousValues>() => T;
}

export interface MahasiswaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MahasiswaSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MahasiswaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MahasiswaPreviousValuesSubscription>() => T;
}

export interface AggregateAngkatanNode {
  count: Int;
}

export interface AggregateAngkatan
  extends Promise<AggregateAngkatanNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAngkatanSubscription
  extends Promise<AsyncIterator<AggregateAngkatanNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MahasiswaPreviousValuesNode {
  id: ID_Output;
  nim: String;
  nama: String;
}

export interface MahasiswaPreviousValues
  extends Promise<MahasiswaPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nim: () => Promise<String>;
  nama: () => Promise<String>;
}

export interface MahasiswaPreviousValuesSubscription
  extends Promise<AsyncIterator<MahasiswaPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nim: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateKelasNode {
  count: Int;
}

export interface AggregateKelas
  extends Promise<AggregateKelasNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKelasSubscription
  extends Promise<AsyncIterator<AggregateKelasNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface JurusanNode {
  id: ID_Output;
  nama: String;
}

export interface Jurusan extends Promise<JurusanNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
  prodis: <T = Promise<Array<ProdiNode>>>(args?: {
    where?: ProdiWhereInput;
    orderBy?: ProdiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface JurusanSubscription
  extends Promise<AsyncIterator<JurusanNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
  prodis: <T = Promise<AsyncIterator<Array<ProdiSubscription>>>>(args?: {
    where?: ProdiWhereInput;
    orderBy?: ProdiOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MataKuliahPreviousValuesNode {
  id: ID_Output;
  kode: String;
  nama: String;
}

export interface MataKuliahPreviousValues
  extends Promise<MataKuliahPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  kode: () => Promise<String>;
  nama: () => Promise<String>;
}

export interface MataKuliahPreviousValuesSubscription
  extends Promise<AsyncIterator<MataKuliahPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  kode: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface MataKuliahSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MataKuliahSubscriptionPayload
  extends Promise<MataKuliahSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MataKuliah>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MataKuliahPreviousValues>() => T;
}

export interface MataKuliahSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MataKuliahSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MataKuliahSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MataKuliahPreviousValuesSubscription>() => T;
}

export interface AngkatanNode {
  id: ID_Output;
  nama: String;
}

export interface Angkatan extends Promise<AngkatanNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
}

export interface AngkatanSubscription
  extends Promise<AsyncIterator<AngkatanNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface JurusanEdgeNode {
  cursor: String;
}

export interface JurusanEdge extends Promise<JurusanEdgeNode>, Fragmentable {
  node: <T = Jurusan>() => T;
  cursor: () => Promise<String>;
}

export interface JurusanEdgeSubscription
  extends Promise<AsyncIterator<JurusanEdgeNode>>,
    Fragmentable {
  node: <T = JurusanSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MataKuliahConnectionNode {}

export interface MataKuliahConnection
  extends Promise<MataKuliahConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<MataKuliahEdgeNode>>>() => T;
  aggregate: <T = AggregateMataKuliah>() => T;
}

export interface MataKuliahConnectionSubscription
  extends Promise<AsyncIterator<MataKuliahConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<MataKuliahEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateMataKuliahSubscription>() => T;
}

export interface MataKuliahNode {
  id: ID_Output;
  kode: String;
  nama: String;
}

export interface MataKuliah extends Promise<MataKuliahNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  kode: () => Promise<String>;
  nama: () => Promise<String>;
  prodi: <T = Prodi>() => T;
  dosens: <T = Promise<Array<DosenNode>>>(args?: {
    where?: DosenWhereInput;
    orderBy?: DosenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  kelases: <T = Promise<Array<KelasNode>>>(args?: {
    where?: KelasWhereInput;
    orderBy?: KelasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MataKuliahSubscription
  extends Promise<AsyncIterator<MataKuliahNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  kode: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
  prodi: <T = ProdiSubscription>() => T;
  dosens: <T = Promise<AsyncIterator<Array<DosenSubscription>>>>(args?: {
    where?: DosenWhereInput;
    orderBy?: DosenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  kelases: <T = Promise<AsyncIterator<Array<KelasSubscription>>>>(args?: {
    where?: KelasWhereInput;
    orderBy?: KelasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DosenEdgeNode {
  cursor: String;
}

export interface DosenEdge extends Promise<DosenEdgeNode>, Fragmentable {
  node: <T = Dosen>() => T;
  cursor: () => Promise<String>;
}

export interface DosenEdgeSubscription
  extends Promise<AsyncIterator<DosenEdgeNode>>,
    Fragmentable {
  node: <T = DosenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Type Defs
 */

export const prisma: Prisma;
