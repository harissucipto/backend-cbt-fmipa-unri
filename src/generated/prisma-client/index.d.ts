// Code generated by Prisma (prisma@1.17.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { GraphQLSchema } from "graphql";
import { IResolvers } from "graphql-tools/dist/Interfaces";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  admin: (where?: AdminWhereInput) => Promise<boolean>;
  dosen: (where?: DosenWhereInput) => Promise<boolean>;
  jawaban: (where?: JawabanWhereInput) => Promise<boolean>;
  jawabanMahasiswa: (where?: JawabanMahasiswaWhereInput) => Promise<boolean>;
  kelas: (where?: KelasWhereInput) => Promise<boolean>;
  mahasiswa: (where?: MahasiswaWhereInput) => Promise<boolean>;
  mataKuliah: (where?: MataKuliahWhereInput) => Promise<boolean>;
  pengawas: (where?: PengawasWhereInput) => Promise<boolean>;
  pertanyaan: (where?: PertanyaanWhereInput) => Promise<boolean>;
  pilihanGanda: (where?: PilihanGandaWhereInput) => Promise<boolean>;
  soalMahasiswa: (where?: SoalMahasiswaWhereInput) => Promise<boolean>;
  ujian: (where?: UjianWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export interface Fragmentable {
  $fragment<T>(fragment: string | Object): T;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;
  $getAbstractResolvers(filterSchema?: GraphQLSchema | string): IResolvers;

  /**
   * Queries
   */

  admin: (where: AdminWhereUniqueInput) => Admin;
  admins: (args?: {
    where?: AdminWhereInput;
    orderBy?: AdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<AdminNode>>;
  adminsConnection: (args?: {
    where?: AdminWhereInput;
    orderBy?: AdminOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AdminConnection;
  dosen: (where: DosenWhereUniqueInput) => Dosen;
  dosens: (args?: {
    where?: DosenWhereInput;
    orderBy?: DosenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<DosenNode>>;
  dosensConnection: (args?: {
    where?: DosenWhereInput;
    orderBy?: DosenOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => DosenConnection;
  jawaban: (where: JawabanWhereUniqueInput) => Jawaban;
  jawabans: (args?: {
    where?: JawabanWhereInput;
    orderBy?: JawabanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<JawabanNode>>;
  jawabansConnection: (args?: {
    where?: JawabanWhereInput;
    orderBy?: JawabanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JawabanConnection;
  jawabanMahasiswa: (
    where: JawabanMahasiswaWhereUniqueInput
  ) => JawabanMahasiswa;
  jawabanMahasiswas: (args?: {
    where?: JawabanMahasiswaWhereInput;
    orderBy?: JawabanMahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<JawabanMahasiswaNode>>;
  jawabanMahasiswasConnection: (args?: {
    where?: JawabanMahasiswaWhereInput;
    orderBy?: JawabanMahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => JawabanMahasiswaConnection;
  kelas: (where: KelasWhereUniqueInput) => Kelas;
  kelases: (args?: {
    where?: KelasWhereInput;
    orderBy?: KelasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<KelasNode>>;
  kelasesConnection: (args?: {
    where?: KelasWhereInput;
    orderBy?: KelasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => KelasConnection;
  mahasiswa: (where: MahasiswaWhereUniqueInput) => Mahasiswa;
  mahasiswas: (args?: {
    where?: MahasiswaWhereInput;
    orderBy?: MahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<MahasiswaNode>>;
  mahasiswasConnection: (args?: {
    where?: MahasiswaWhereInput;
    orderBy?: MahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MahasiswaConnection;
  mataKuliah: (where: MataKuliahWhereUniqueInput) => MataKuliah;
  mataKuliahs: (args?: {
    where?: MataKuliahWhereInput;
    orderBy?: MataKuliahOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<MataKuliahNode>>;
  mataKuliahsConnection: (args?: {
    where?: MataKuliahWhereInput;
    orderBy?: MataKuliahOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MataKuliahConnection;
  pengawas: (where: PengawasWhereUniqueInput) => Pengawas;
  pengawases: (args?: {
    where?: PengawasWhereInput;
    orderBy?: PengawasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<PengawasNode>>;
  pengawasesConnection: (args?: {
    where?: PengawasWhereInput;
    orderBy?: PengawasOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PengawasConnection;
  pertanyaan: (where: PertanyaanWhereUniqueInput) => Pertanyaan;
  pertanyaans: (args?: {
    where?: PertanyaanWhereInput;
    orderBy?: PertanyaanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<PertanyaanNode>>;
  pertanyaansConnection: (args?: {
    where?: PertanyaanWhereInput;
    orderBy?: PertanyaanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PertanyaanConnection;
  pilihanGanda: (where: PilihanGandaWhereUniqueInput) => PilihanGanda;
  pilihanGandas: (args?: {
    where?: PilihanGandaWhereInput;
    orderBy?: PilihanGandaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<PilihanGandaNode>>;
  pilihanGandasConnection: (args?: {
    where?: PilihanGandaWhereInput;
    orderBy?: PilihanGandaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PilihanGandaConnection;
  soalMahasiswa: (where: SoalMahasiswaWhereUniqueInput) => SoalMahasiswa;
  soalMahasiswas: (args?: {
    where?: SoalMahasiswaWhereInput;
    orderBy?: SoalMahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<SoalMahasiswaNode>>;
  soalMahasiswasConnection: (args?: {
    where?: SoalMahasiswaWhereInput;
    orderBy?: SoalMahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SoalMahasiswaConnection;
  ujian: (where: UjianWhereUniqueInput) => Ujian;
  ujians: (args?: {
    where?: UjianWhereInput;
    orderBy?: UjianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<UjianNode>>;
  ujiansConnection: (args?: {
    where?: UjianWhereInput;
    orderBy?: UjianOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UjianConnection;
  user: (where: UserWhereUniqueInput) => User;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => Promise<Array<UserNode>>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnection;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAdmin: (data: AdminCreateInput) => Admin;
  updateAdmin: (args: {
    data: AdminUpdateInput;
    where: AdminWhereUniqueInput;
  }) => Admin;
  updateManyAdmins: (args: {
    data: AdminUpdateInput;
    where?: AdminWhereInput;
  }) => BatchPayload;
  upsertAdmin: (args: {
    where: AdminWhereUniqueInput;
    create: AdminCreateInput;
    update: AdminUpdateInput;
  }) => Admin;
  deleteAdmin: (where: AdminWhereUniqueInput) => Admin;
  deleteManyAdmins: (where?: AdminWhereInput) => BatchPayload;
  createDosen: (data: DosenCreateInput) => Dosen;
  updateDosen: (args: {
    data: DosenUpdateInput;
    where: DosenWhereUniqueInput;
  }) => Dosen;
  updateManyDosens: (args: {
    data: DosenUpdateInput;
    where?: DosenWhereInput;
  }) => BatchPayload;
  upsertDosen: (args: {
    where: DosenWhereUniqueInput;
    create: DosenCreateInput;
    update: DosenUpdateInput;
  }) => Dosen;
  deleteDosen: (where: DosenWhereUniqueInput) => Dosen;
  deleteManyDosens: (where?: DosenWhereInput) => BatchPayload;
  createJawaban: (data: JawabanCreateInput) => Jawaban;
  updateJawaban: (args: {
    data: JawabanUpdateInput;
    where: JawabanWhereUniqueInput;
  }) => Jawaban;
  updateManyJawabans: (args: {
    data: JawabanUpdateInput;
    where?: JawabanWhereInput;
  }) => BatchPayload;
  upsertJawaban: (args: {
    where: JawabanWhereUniqueInput;
    create: JawabanCreateInput;
    update: JawabanUpdateInput;
  }) => Jawaban;
  deleteJawaban: (where: JawabanWhereUniqueInput) => Jawaban;
  deleteManyJawabans: (where?: JawabanWhereInput) => BatchPayload;
  createJawabanMahasiswa: (
    data: JawabanMahasiswaCreateInput
  ) => JawabanMahasiswa;
  updateJawabanMahasiswa: (args: {
    data: JawabanMahasiswaUpdateInput;
    where: JawabanMahasiswaWhereUniqueInput;
  }) => JawabanMahasiswa;
  updateManyJawabanMahasiswas: (args: {
    data: JawabanMahasiswaUpdateInput;
    where?: JawabanMahasiswaWhereInput;
  }) => BatchPayload;
  upsertJawabanMahasiswa: (args: {
    where: JawabanMahasiswaWhereUniqueInput;
    create: JawabanMahasiswaCreateInput;
    update: JawabanMahasiswaUpdateInput;
  }) => JawabanMahasiswa;
  deleteJawabanMahasiswa: (
    where: JawabanMahasiswaWhereUniqueInput
  ) => JawabanMahasiswa;
  deleteManyJawabanMahasiswas: (
    where?: JawabanMahasiswaWhereInput
  ) => BatchPayload;
  createKelas: (data: KelasCreateInput) => Kelas;
  updateKelas: (args: {
    data: KelasUpdateInput;
    where: KelasWhereUniqueInput;
  }) => Kelas;
  updateManyKelases: (args: {
    data: KelasUpdateInput;
    where?: KelasWhereInput;
  }) => BatchPayload;
  upsertKelas: (args: {
    where: KelasWhereUniqueInput;
    create: KelasCreateInput;
    update: KelasUpdateInput;
  }) => Kelas;
  deleteKelas: (where: KelasWhereUniqueInput) => Kelas;
  deleteManyKelases: (where?: KelasWhereInput) => BatchPayload;
  createMahasiswa: (data: MahasiswaCreateInput) => Mahasiswa;
  updateMahasiswa: (args: {
    data: MahasiswaUpdateInput;
    where: MahasiswaWhereUniqueInput;
  }) => Mahasiswa;
  updateManyMahasiswas: (args: {
    data: MahasiswaUpdateInput;
    where?: MahasiswaWhereInput;
  }) => BatchPayload;
  upsertMahasiswa: (args: {
    where: MahasiswaWhereUniqueInput;
    create: MahasiswaCreateInput;
    update: MahasiswaUpdateInput;
  }) => Mahasiswa;
  deleteMahasiswa: (where: MahasiswaWhereUniqueInput) => Mahasiswa;
  deleteManyMahasiswas: (where?: MahasiswaWhereInput) => BatchPayload;
  createMataKuliah: (data: MataKuliahCreateInput) => MataKuliah;
  updateMataKuliah: (args: {
    data: MataKuliahUpdateInput;
    where: MataKuliahWhereUniqueInput;
  }) => MataKuliah;
  updateManyMataKuliahs: (args: {
    data: MataKuliahUpdateInput;
    where?: MataKuliahWhereInput;
  }) => BatchPayload;
  upsertMataKuliah: (args: {
    where: MataKuliahWhereUniqueInput;
    create: MataKuliahCreateInput;
    update: MataKuliahUpdateInput;
  }) => MataKuliah;
  deleteMataKuliah: (where: MataKuliahWhereUniqueInput) => MataKuliah;
  deleteManyMataKuliahs: (where?: MataKuliahWhereInput) => BatchPayload;
  createPengawas: (data: PengawasCreateInput) => Pengawas;
  updatePengawas: (args: {
    data: PengawasUpdateInput;
    where: PengawasWhereUniqueInput;
  }) => Pengawas;
  updateManyPengawases: (args: {
    data: PengawasUpdateInput;
    where?: PengawasWhereInput;
  }) => BatchPayload;
  upsertPengawas: (args: {
    where: PengawasWhereUniqueInput;
    create: PengawasCreateInput;
    update: PengawasUpdateInput;
  }) => Pengawas;
  deletePengawas: (where: PengawasWhereUniqueInput) => Pengawas;
  deleteManyPengawases: (where?: PengawasWhereInput) => BatchPayload;
  createPertanyaan: (data: PertanyaanCreateInput) => Pertanyaan;
  updatePertanyaan: (args: {
    data: PertanyaanUpdateInput;
    where: PertanyaanWhereUniqueInput;
  }) => Pertanyaan;
  updateManyPertanyaans: (args: {
    data: PertanyaanUpdateInput;
    where?: PertanyaanWhereInput;
  }) => BatchPayload;
  upsertPertanyaan: (args: {
    where: PertanyaanWhereUniqueInput;
    create: PertanyaanCreateInput;
    update: PertanyaanUpdateInput;
  }) => Pertanyaan;
  deletePertanyaan: (where: PertanyaanWhereUniqueInput) => Pertanyaan;
  deleteManyPertanyaans: (where?: PertanyaanWhereInput) => BatchPayload;
  createPilihanGanda: (data: PilihanGandaCreateInput) => PilihanGanda;
  updatePilihanGanda: (args: {
    data: PilihanGandaUpdateInput;
    where: PilihanGandaWhereUniqueInput;
  }) => PilihanGanda;
  updateManyPilihanGandas: (args: {
    data: PilihanGandaUpdateInput;
    where?: PilihanGandaWhereInput;
  }) => BatchPayload;
  upsertPilihanGanda: (args: {
    where: PilihanGandaWhereUniqueInput;
    create: PilihanGandaCreateInput;
    update: PilihanGandaUpdateInput;
  }) => PilihanGanda;
  deletePilihanGanda: (where: PilihanGandaWhereUniqueInput) => PilihanGanda;
  deleteManyPilihanGandas: (where?: PilihanGandaWhereInput) => BatchPayload;
  createSoalMahasiswa: (data: SoalMahasiswaCreateInput) => SoalMahasiswa;
  updateSoalMahasiswa: (args: {
    data: SoalMahasiswaUpdateInput;
    where: SoalMahasiswaWhereUniqueInput;
  }) => SoalMahasiswa;
  updateManySoalMahasiswas: (args: {
    data: SoalMahasiswaUpdateInput;
    where?: SoalMahasiswaWhereInput;
  }) => BatchPayload;
  upsertSoalMahasiswa: (args: {
    where: SoalMahasiswaWhereUniqueInput;
    create: SoalMahasiswaCreateInput;
    update: SoalMahasiswaUpdateInput;
  }) => SoalMahasiswa;
  deleteSoalMahasiswa: (where: SoalMahasiswaWhereUniqueInput) => SoalMahasiswa;
  deleteManySoalMahasiswas: (where?: SoalMahasiswaWhereInput) => BatchPayload;
  createUjian: (data: UjianCreateInput) => Ujian;
  updateUjian: (args: {
    data: UjianUpdateInput;
    where: UjianWhereUniqueInput;
  }) => Ujian;
  updateManyUjians: (args: {
    data: UjianUpdateInput;
    where?: UjianWhereInput;
  }) => BatchPayload;
  upsertUjian: (args: {
    where: UjianWhereUniqueInput;
    create: UjianCreateInput;
    update: UjianUpdateInput;
  }) => Ujian;
  deleteUjian: (where: UjianWhereUniqueInput) => Ujian;
  deleteManyUjians: (where?: UjianWhereInput) => BatchPayload;
  createUser: (data: UserCreateInput) => User;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => User;
  updateManyUsers: (args: {
    data: UserUpdateInput;
    where?: UserWhereInput;
  }) => BatchPayload;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => User;
  deleteUser: (where: UserWhereUniqueInput) => User;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayload;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  admin: (
    where?: AdminSubscriptionWhereInput
  ) => AdminSubscriptionPayloadSubscription;
  dosen: (
    where?: DosenSubscriptionWhereInput
  ) => DosenSubscriptionPayloadSubscription;
  jawaban: (
    where?: JawabanSubscriptionWhereInput
  ) => JawabanSubscriptionPayloadSubscription;
  jawabanMahasiswa: (
    where?: JawabanMahasiswaSubscriptionWhereInput
  ) => JawabanMahasiswaSubscriptionPayloadSubscription;
  kelas: (
    where?: KelasSubscriptionWhereInput
  ) => KelasSubscriptionPayloadSubscription;
  mahasiswa: (
    where?: MahasiswaSubscriptionWhereInput
  ) => MahasiswaSubscriptionPayloadSubscription;
  mataKuliah: (
    where?: MataKuliahSubscriptionWhereInput
  ) => MataKuliahSubscriptionPayloadSubscription;
  pengawas: (
    where?: PengawasSubscriptionWhereInput
  ) => PengawasSubscriptionPayloadSubscription;
  pertanyaan: (
    where?: PertanyaanSubscriptionWhereInput
  ) => PertanyaanSubscriptionPayloadSubscription;
  pilihanGanda: (
    where?: PilihanGandaSubscriptionWhereInput
  ) => PilihanGandaSubscriptionPayloadSubscription;
  soalMahasiswa: (
    where?: SoalMahasiswaSubscriptionWhereInput
  ) => SoalMahasiswaSubscriptionPayloadSubscription;
  ujian: (
    where?: UjianSubscriptionWhereInput
  ) => UjianSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type PengawasOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DosenOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nip_ASC"
  | "nip_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MataKuliahOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "kode_ASC"
  | "kode_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "gambar_ASC"
  | "gambar_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "passwordKasih_ASC"
  | "passwordKasih_DESC"
  | "resetToken_ASC"
  | "resetToken_DESC"
  | "resetTokenExpiry_ASC"
  | "resetTokenExpiry_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type KelasOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "tahunAjaran_ASC"
  | "tahunAjaran_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type Permission = "USER" | "ADMIN" | "DOSEN" | "MAHASISWA" | "PENGAWAS";

export type JawabanOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isi_ASC"
  | "isi_DESC"
  | "gambar_ASC"
  | "gambar_DESC"
  | "kebenaran_ASC"
  | "kebenaran_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type AdminOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type JawabanMahasiswaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MahasiswaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "nim_ASC"
  | "nim_DESC"
  | "nama_ASC"
  | "nama_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SoalMahasiswaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UjianOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "tanggalPelaksanaan_ASC"
  | "tanggalPelaksanaan_DESC"
  | "tokenUjian_ASC"
  | "tokenUjian_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PertanyaanOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isi_ASC"
  | "isi_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PilihanGandaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface AdminCreateWithoutUserInput {
  nama: String;
}

export type AdminWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PertanyaanUpdateInput {
  isi?: String;
  gambar?: PertanyaanUpdategambarInput;
}

export interface PengawasCreateInput {
  nama: String;
  user: UserCreateOneWithoutPengawasInput;
}

export interface UserUpsertWithoutPengawasInput {
  update: UserUpdateWithoutPengawasDataInput;
  create: UserCreateWithoutPengawasInput;
}

export interface JawabanCreateInput {
  isi: String;
  gambar?: String;
  pertanyaan: PertanyaanCreateOneInput;
  kebenaran?: Boolean;
}

export interface UserUpdateWithoutPengawasDataInput {
  gambar?: String;
  email?: String;
  password?: String;
  passwordKasih?: String;
  permissions?: UserUpdatepermissionsInput;
  admin?: AdminUpdateOneWithoutUserInput;
  mahasiswa?: MahasiswaUpdateOneWithoutUserInput;
  dosen?: DosenUpdateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface UjianSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UjianWhereInput;
  AND?: UjianSubscriptionWhereInput[] | UjianSubscriptionWhereInput;
  OR?: UjianSubscriptionWhereInput[] | UjianSubscriptionWhereInput;
  NOT?: UjianSubscriptionWhereInput[] | UjianSubscriptionWhereInput;
}

export interface SoalMahasiswaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: SoalMahasiswaWhereInput;
  AND?:
    | SoalMahasiswaSubscriptionWhereInput[]
    | SoalMahasiswaSubscriptionWhereInput;
  OR?:
    | SoalMahasiswaSubscriptionWhereInput[]
    | SoalMahasiswaSubscriptionWhereInput;
  NOT?:
    | SoalMahasiswaSubscriptionWhereInput[]
    | SoalMahasiswaSubscriptionWhereInput;
}

export interface PertanyaanSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PertanyaanWhereInput;
  AND?: PertanyaanSubscriptionWhereInput[] | PertanyaanSubscriptionWhereInput;
  OR?: PertanyaanSubscriptionWhereInput[] | PertanyaanSubscriptionWhereInput;
  NOT?: PertanyaanSubscriptionWhereInput[] | PertanyaanSubscriptionWhereInput;
}

export interface AdminCreateInput {
  nama: String;
  user: UserCreateOneWithoutAdminInput;
}

export type JawabanWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserCreateOneWithoutAdminInput {
  create?: UserCreateWithoutAdminInput;
  connect?: UserWhereUniqueInput;
}

export interface MahasiswaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MahasiswaWhereInput;
  AND?: MahasiswaSubscriptionWhereInput[] | MahasiswaSubscriptionWhereInput;
  OR?: MahasiswaSubscriptionWhereInput[] | MahasiswaSubscriptionWhereInput;
  NOT?: MahasiswaSubscriptionWhereInput[] | MahasiswaSubscriptionWhereInput;
}

export interface UserCreateWithoutAdminInput {
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions?: UserCreatepermissionsInput;
  mahasiswa?: MahasiswaCreateOneWithoutUserInput;
  dosen?: DosenCreateOneWithoutUserInput;
  pengawas?: PengawasCreateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface PertanyaanWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  isi?: String;
  isi_not?: String;
  isi_in?: String[] | String;
  isi_not_in?: String[] | String;
  isi_lt?: String;
  isi_lte?: String;
  isi_gt?: String;
  isi_gte?: String;
  isi_contains?: String;
  isi_not_contains?: String;
  isi_starts_with?: String;
  isi_not_starts_with?: String;
  isi_ends_with?: String;
  isi_not_ends_with?: String;
  AND?: PertanyaanWhereInput[] | PertanyaanWhereInput;
  OR?: PertanyaanWhereInput[] | PertanyaanWhereInput;
  NOT?: PertanyaanWhereInput[] | PertanyaanWhereInput;
}

export interface UserCreatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface JawabanMahasiswaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: JawabanMahasiswaWhereInput;
  AND?:
    | JawabanMahasiswaSubscriptionWhereInput[]
    | JawabanMahasiswaSubscriptionWhereInput;
  OR?:
    | JawabanMahasiswaSubscriptionWhereInput[]
    | JawabanMahasiswaSubscriptionWhereInput;
  NOT?:
    | JawabanMahasiswaSubscriptionWhereInput[]
    | JawabanMahasiswaSubscriptionWhereInput;
}

export interface MahasiswaCreateOneWithoutUserInput {
  create?: MahasiswaCreateWithoutUserInput;
  connect?: MahasiswaWhereUniqueInput;
}

export interface DosenSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DosenWhereInput;
  AND?: DosenSubscriptionWhereInput[] | DosenSubscriptionWhereInput;
  OR?: DosenSubscriptionWhereInput[] | DosenSubscriptionWhereInput;
  NOT?: DosenSubscriptionWhereInput[] | DosenSubscriptionWhereInput;
}

export interface MahasiswaCreateWithoutUserInput {
  nim: String;
  nama: String;
}

export interface AdminSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: AdminWhereInput;
  AND?: AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput;
  OR?: AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput;
  NOT?: AdminSubscriptionWhereInput[] | AdminSubscriptionWhereInput;
}

export interface DosenCreateOneWithoutUserInput {
  create?: DosenCreateWithoutUserInput;
  connect?: DosenWhereUniqueInput;
}

export interface PengawasWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: PengawasWhereInput[] | PengawasWhereInput;
  OR?: PengawasWhereInput[] | PengawasWhereInput;
  NOT?: PengawasWhereInput[] | PengawasWhereInput;
}

export interface DosenCreateWithoutUserInput {
  nip: String;
  nama: String;
}

export interface UserCreateInput {
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions?: UserCreatepermissionsInput;
  admin?: AdminCreateOneWithoutUserInput;
  mahasiswa?: MahasiswaCreateOneWithoutUserInput;
  dosen?: DosenCreateOneWithoutUserInput;
  pengawas?: PengawasCreateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface PengawasCreateOneWithoutUserInput {
  create?: PengawasCreateWithoutUserInput;
  connect?: PengawasWhereUniqueInput;
}

export type KelasWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PengawasCreateWithoutUserInput {
  nama: String;
}

export interface SoalMahasiswaUpdateWithWhereUniqueNestedInput {
  where: SoalMahasiswaWhereUniqueInput;
  data: SoalMahasiswaUpdateDataInput;
}

export interface AdminUpdateInput {
  nama?: String;
  user?: UserUpdateOneRequiredWithoutAdminInput;
}

export interface DosenWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nip?: String;
  nip_not?: String;
  nip_in?: String[] | String;
  nip_not_in?: String[] | String;
  nip_lt?: String;
  nip_lte?: String;
  nip_gt?: String;
  nip_gte?: String;
  nip_contains?: String;
  nip_not_contains?: String;
  nip_starts_with?: String;
  nip_not_starts_with?: String;
  nip_ends_with?: String;
  nip_not_ends_with?: String;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: DosenWhereInput[] | DosenWhereInput;
  OR?: DosenWhereInput[] | DosenWhereInput;
  NOT?: DosenWhereInput[] | DosenWhereInput;
}

export interface UserUpdateOneRequiredWithoutAdminInput {
  create?: UserCreateWithoutAdminInput;
  update?: UserUpdateWithoutAdminDataInput;
  upsert?: UserUpsertWithoutAdminInput;
  connect?: UserWhereUniqueInput;
}

export interface MataKuliahWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  kode?: String;
  kode_not?: String;
  kode_in?: String[] | String;
  kode_not_in?: String[] | String;
  kode_lt?: String;
  kode_lte?: String;
  kode_gt?: String;
  kode_gte?: String;
  kode_contains?: String;
  kode_not_contains?: String;
  kode_starts_with?: String;
  kode_not_starts_with?: String;
  kode_ends_with?: String;
  kode_not_ends_with?: String;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: MataKuliahWhereInput[] | MataKuliahWhereInput;
  OR?: MataKuliahWhereInput[] | MataKuliahWhereInput;
  NOT?: MataKuliahWhereInput[] | MataKuliahWhereInput;
}

export interface UserUpdateWithoutAdminDataInput {
  gambar?: String;
  email?: String;
  password?: String;
  passwordKasih?: String;
  permissions?: UserUpdatepermissionsInput;
  mahasiswa?: MahasiswaUpdateOneWithoutUserInput;
  dosen?: DosenUpdateOneWithoutUserInput;
  pengawas?: PengawasUpdateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface PengawasUpsertNestedInput {
  update: PengawasUpdateDataInput;
  create: PengawasCreateInput;
}

export interface UserUpdatepermissionsInput {
  set?: Permission[] | Permission;
}

export interface PengawasUpdateOneRequiredInput {
  create?: PengawasCreateInput;
  update?: PengawasUpdateDataInput;
  upsert?: PengawasUpsertNestedInput;
  connect?: PengawasWhereUniqueInput;
}

export interface MahasiswaUpdateOneWithoutUserInput {
  create?: MahasiswaCreateWithoutUserInput;
  update?: MahasiswaUpdateWithoutUserDataInput;
  upsert?: MahasiswaUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: MahasiswaWhereUniqueInput;
}

export interface KelasUpsertNestedInput {
  update: KelasUpdateDataInput;
  create: KelasCreateInput;
}

export interface MahasiswaUpdateWithoutUserDataInput {
  nim?: String;
  nama?: String;
}

export interface KelasUpdateOneRequiredInput {
  create?: KelasCreateInput;
  update?: KelasUpdateDataInput;
  upsert?: KelasUpsertNestedInput;
  connect?: KelasWhereUniqueInput;
}

export interface MahasiswaUpsertWithoutUserInput {
  update: MahasiswaUpdateWithoutUserDataInput;
  create: MahasiswaCreateWithoutUserInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  gambar?: String;
  gambar_not?: String;
  gambar_in?: String[] | String;
  gambar_not_in?: String[] | String;
  gambar_lt?: String;
  gambar_lte?: String;
  gambar_gt?: String;
  gambar_gte?: String;
  gambar_contains?: String;
  gambar_not_contains?: String;
  gambar_starts_with?: String;
  gambar_not_starts_with?: String;
  gambar_ends_with?: String;
  gambar_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  passwordKasih?: String;
  passwordKasih_not?: String;
  passwordKasih_in?: String[] | String;
  passwordKasih_not_in?: String[] | String;
  passwordKasih_lt?: String;
  passwordKasih_lte?: String;
  passwordKasih_gt?: String;
  passwordKasih_gte?: String;
  passwordKasih_contains?: String;
  passwordKasih_not_contains?: String;
  passwordKasih_starts_with?: String;
  passwordKasih_not_starts_with?: String;
  passwordKasih_ends_with?: String;
  passwordKasih_not_ends_with?: String;
  admin?: AdminWhereInput;
  mahasiswa?: MahasiswaWhereInput;
  dosen?: DosenWhereInput;
  pengawas?: PengawasWhereInput;
  resetToken?: String;
  resetToken_not?: String;
  resetToken_in?: String[] | String;
  resetToken_not_in?: String[] | String;
  resetToken_lt?: String;
  resetToken_lte?: String;
  resetToken_gt?: String;
  resetToken_gte?: String;
  resetToken_contains?: String;
  resetToken_not_contains?: String;
  resetToken_starts_with?: String;
  resetToken_not_starts_with?: String;
  resetToken_ends_with?: String;
  resetToken_not_ends_with?: String;
  resetTokenExpiry?: String;
  resetTokenExpiry_not?: String;
  resetTokenExpiry_in?: String[] | String;
  resetTokenExpiry_not_in?: String[] | String;
  resetTokenExpiry_lt?: String;
  resetTokenExpiry_lte?: String;
  resetTokenExpiry_gt?: String;
  resetTokenExpiry_gte?: String;
  resetTokenExpiry_contains?: String;
  resetTokenExpiry_not_contains?: String;
  resetTokenExpiry_starts_with?: String;
  resetTokenExpiry_not_starts_with?: String;
  resetTokenExpiry_ends_with?: String;
  resetTokenExpiry_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface DosenUpdateOneWithoutUserInput {
  create?: DosenCreateWithoutUserInput;
  update?: DosenUpdateWithoutUserDataInput;
  upsert?: DosenUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: DosenWhereUniqueInput;
}

export interface SoalMahasiswaCreateManyInput {
  create?: SoalMahasiswaCreateInput[] | SoalMahasiswaCreateInput;
  connect?: SoalMahasiswaWhereUniqueInput[] | SoalMahasiswaWhereUniqueInput;
}

export interface DosenUpdateWithoutUserDataInput {
  nip?: String;
  nama?: String;
}

export type PengawasWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DosenUpsertWithoutUserInput {
  update: DosenUpdateWithoutUserDataInput;
  create: DosenCreateWithoutUserInput;
}

export interface KelasCreateOneInput {
  create?: KelasCreateInput;
  connect?: KelasWhereUniqueInput;
}

export interface PengawasUpdateOneWithoutUserInput {
  create?: PengawasCreateWithoutUserInput;
  update?: PengawasUpdateWithoutUserDataInput;
  upsert?: PengawasUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PengawasWhereUniqueInput;
}

export interface JawabanMahasiswaUpsertWithWhereUniqueNestedInput {
  where: JawabanMahasiswaWhereUniqueInput;
  update: JawabanMahasiswaUpdateDataInput;
  create: JawabanMahasiswaCreateInput;
}

export interface PengawasUpdateWithoutUserDataInput {
  nama?: String;
}

export interface JawabanMahasiswaUpdateDataInput {
  JawabanSoal?: JawabanUpdateOneRequiredInput;
}

export interface PengawasUpsertWithoutUserInput {
  update: PengawasUpdateWithoutUserDataInput;
  create: PengawasCreateWithoutUserInput;
}

export interface JawabanMahasiswaUpdateManyInput {
  create?: JawabanMahasiswaCreateInput[] | JawabanMahasiswaCreateInput;
  delete?:
    | JawabanMahasiswaWhereUniqueInput[]
    | JawabanMahasiswaWhereUniqueInput;
  connect?:
    | JawabanMahasiswaWhereUniqueInput[]
    | JawabanMahasiswaWhereUniqueInput;
  disconnect?:
    | JawabanMahasiswaWhereUniqueInput[]
    | JawabanMahasiswaWhereUniqueInput;
  update?:
    | JawabanMahasiswaUpdateWithWhereUniqueNestedInput[]
    | JawabanMahasiswaUpdateWithWhereUniqueNestedInput;
  upsert?:
    | JawabanMahasiswaUpsertWithWhereUniqueNestedInput[]
    | JawabanMahasiswaUpsertWithWhereUniqueNestedInput;
}

export interface UserUpsertWithoutAdminInput {
  update: UserUpdateWithoutAdminDataInput;
  create: UserCreateWithoutAdminInput;
}

export type PilihanGandaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateOneRequiredWithoutPengawasInput {
  create?: UserCreateWithoutPengawasInput;
  update?: UserUpdateWithoutPengawasDataInput;
  upsert?: UserUpsertWithoutPengawasInput;
  connect?: UserWhereUniqueInput;
}

export interface PilihanGandaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  pertanyaan?: PertanyaanWhereInput;
  jawaban_every?: JawabanWhereInput;
  jawaban_some?: JawabanWhereInput;
  jawaban_none?: JawabanWhereInput;
  AND?: PilihanGandaWhereInput[] | PilihanGandaWhereInput;
  OR?: PilihanGandaWhereInput[] | PilihanGandaWhereInput;
  NOT?: PilihanGandaWhereInput[] | PilihanGandaWhereInput;
}

export interface PengawasUpdateInput {
  nama?: String;
  user?: UserUpdateOneRequiredWithoutPengawasInput;
}

export interface PilihanGandaUpdateManyInput {
  create?: PilihanGandaCreateInput[] | PilihanGandaCreateInput;
  delete?: PilihanGandaWhereUniqueInput[] | PilihanGandaWhereUniqueInput;
  connect?: PilihanGandaWhereUniqueInput[] | PilihanGandaWhereUniqueInput;
  disconnect?: PilihanGandaWhereUniqueInput[] | PilihanGandaWhereUniqueInput;
  update?:
    | PilihanGandaUpdateWithWhereUniqueNestedInput[]
    | PilihanGandaUpdateWithWhereUniqueNestedInput;
  upsert?:
    | PilihanGandaUpsertWithWhereUniqueNestedInput[]
    | PilihanGandaUpsertWithWhereUniqueNestedInput;
}

export interface DosenCreateInput {
  nip: String;
  nama: String;
  user: UserCreateOneWithoutDosenInput;
}

export interface MahasiswaUpdateOneRequiredInput {
  create?: MahasiswaCreateInput;
  update?: MahasiswaUpdateDataInput;
  upsert?: MahasiswaUpsertNestedInput;
  connect?: MahasiswaWhereUniqueInput;
}

export interface UserCreateOneWithoutDosenInput {
  create?: UserCreateWithoutDosenInput;
  connect?: UserWhereUniqueInput;
}

export interface SoalMahasiswaUpdateInput {
  mahasiswa?: MahasiswaUpdateOneRequiredInput;
  listSoal?: PilihanGandaUpdateManyInput;
  listJawaban?: JawabanMahasiswaUpdateManyInput;
}

export interface UserCreateWithoutDosenInput {
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions?: UserCreatepermissionsInput;
  admin?: AdminCreateOneWithoutUserInput;
  mahasiswa?: MahasiswaCreateOneWithoutUserInput;
  pengawas?: PengawasCreateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface JawabanMahasiswaCreateManyInput {
  create?: JawabanMahasiswaCreateInput[] | JawabanMahasiswaCreateInput;
  connect?:
    | JawabanMahasiswaWhereUniqueInput[]
    | JawabanMahasiswaWhereUniqueInput;
}

export interface AdminCreateOneWithoutUserInput {
  create?: AdminCreateWithoutUserInput;
  connect?: AdminWhereUniqueInput;
}

export interface MahasiswaCreateOneInput {
  create?: MahasiswaCreateInput;
  connect?: MahasiswaWhereUniqueInput;
}

export interface UserCreateWithoutPengawasInput {
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions?: UserCreatepermissionsInput;
  admin?: AdminCreateOneWithoutUserInput;
  mahasiswa?: MahasiswaCreateOneWithoutUserInput;
  dosen?: DosenCreateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export type UjianWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface DosenUpdateInput {
  nip?: String;
  nama?: String;
  user?: UserUpdateOneRequiredWithoutDosenInput;
}

export interface UjianWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  Kelas?: KelasWhereInput;
  pengawas?: PengawasWhereInput;
  listSoal_every?: SoalMahasiswaWhereInput;
  listSoal_some?: SoalMahasiswaWhereInput;
  listSoal_none?: SoalMahasiswaWhereInput;
  tanggalPelaksanaan?: DateTimeInput;
  tanggalPelaksanaan_not?: DateTimeInput;
  tanggalPelaksanaan_in?: DateTimeInput[] | DateTimeInput;
  tanggalPelaksanaan_not_in?: DateTimeInput[] | DateTimeInput;
  tanggalPelaksanaan_lt?: DateTimeInput;
  tanggalPelaksanaan_lte?: DateTimeInput;
  tanggalPelaksanaan_gt?: DateTimeInput;
  tanggalPelaksanaan_gte?: DateTimeInput;
  tokenUjian?: String;
  tokenUjian_not?: String;
  tokenUjian_in?: String[] | String;
  tokenUjian_not_in?: String[] | String;
  tokenUjian_lt?: String;
  tokenUjian_lte?: String;
  tokenUjian_gt?: String;
  tokenUjian_gte?: String;
  tokenUjian_contains?: String;
  tokenUjian_not_contains?: String;
  tokenUjian_starts_with?: String;
  tokenUjian_not_starts_with?: String;
  tokenUjian_ends_with?: String;
  tokenUjian_not_ends_with?: String;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: UjianWhereInput[] | UjianWhereInput;
  OR?: UjianWhereInput[] | UjianWhereInput;
  NOT?: UjianWhereInput[] | UjianWhereInput;
}

export interface UserUpdateOneRequiredWithoutDosenInput {
  create?: UserCreateWithoutDosenInput;
  update?: UserUpdateWithoutDosenDataInput;
  upsert?: UserUpsertWithoutDosenInput;
  connect?: UserWhereUniqueInput;
}

export interface JawabanUpdateManyInput {
  create?: JawabanCreateInput[] | JawabanCreateInput;
  delete?: JawabanWhereUniqueInput[] | JawabanWhereUniqueInput;
  connect?: JawabanWhereUniqueInput[] | JawabanWhereUniqueInput;
  disconnect?: JawabanWhereUniqueInput[] | JawabanWhereUniqueInput;
  update?:
    | JawabanUpdateWithWhereUniqueNestedInput[]
    | JawabanUpdateWithWhereUniqueNestedInput;
  upsert?:
    | JawabanUpsertWithWhereUniqueNestedInput[]
    | JawabanUpsertWithWhereUniqueNestedInput;
}

export interface UserUpdateWithoutDosenDataInput {
  gambar?: String;
  email?: String;
  password?: String;
  passwordKasih?: String;
  permissions?: UserUpdatepermissionsInput;
  admin?: AdminUpdateOneWithoutUserInput;
  mahasiswa?: MahasiswaUpdateOneWithoutUserInput;
  pengawas?: PengawasUpdateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface JawabanCreateManyInput {
  create?: JawabanCreateInput[] | JawabanCreateInput;
  connect?: JawabanWhereUniqueInput[] | JawabanWhereUniqueInput;
}

export interface AdminUpdateOneWithoutUserInput {
  create?: AdminCreateWithoutUserInput;
  update?: AdminUpdateWithoutUserDataInput;
  upsert?: AdminUpsertWithoutUserInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: AdminWhereUniqueInput;
}

export interface PilihanGandaCreateInput {
  pertanyaan: PertanyaanCreateOneInput;
  jawaban?: JawabanCreateManyInput;
}

export interface AdminUpdateWithoutUserDataInput {
  nama?: String;
}

export type DosenWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  nip?: String;
}>;

export interface AdminUpsertWithoutUserInput {
  update: AdminUpdateWithoutUserDataInput;
  create: AdminCreateWithoutUserInput;
}

export interface PengawasSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PengawasWhereInput;
  AND?: PengawasSubscriptionWhereInput[] | PengawasSubscriptionWhereInput;
  OR?: PengawasSubscriptionWhereInput[] | PengawasSubscriptionWhereInput;
  NOT?: PengawasSubscriptionWhereInput[] | PengawasSubscriptionWhereInput;
}

export interface UserUpsertWithoutDosenInput {
  update: UserUpdateWithoutDosenDataInput;
  create: UserCreateWithoutDosenInput;
}

export interface JawabanWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  isi?: String;
  isi_not?: String;
  isi_in?: String[] | String;
  isi_not_in?: String[] | String;
  isi_lt?: String;
  isi_lte?: String;
  isi_gt?: String;
  isi_gte?: String;
  isi_contains?: String;
  isi_not_contains?: String;
  isi_starts_with?: String;
  isi_not_starts_with?: String;
  isi_ends_with?: String;
  isi_not_ends_with?: String;
  gambar?: String;
  gambar_not?: String;
  gambar_in?: String[] | String;
  gambar_not_in?: String[] | String;
  gambar_lt?: String;
  gambar_lte?: String;
  gambar_gt?: String;
  gambar_gte?: String;
  gambar_contains?: String;
  gambar_not_contains?: String;
  gambar_starts_with?: String;
  gambar_not_starts_with?: String;
  gambar_ends_with?: String;
  gambar_not_ends_with?: String;
  pertanyaan?: PertanyaanWhereInput;
  kebenaran?: Boolean;
  kebenaran_not?: Boolean;
  AND?: JawabanWhereInput[] | JawabanWhereInput;
  OR?: JawabanWhereInput[] | JawabanWhereInput;
  NOT?: JawabanWhereInput[] | JawabanWhereInput;
}

export interface UserCreateOneWithoutPengawasInput {
  create?: UserCreateWithoutPengawasInput;
  connect?: UserWhereUniqueInput;
}

export interface JawabanSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: JawabanWhereInput;
  AND?: JawabanSubscriptionWhereInput[] | JawabanSubscriptionWhereInput;
  OR?: JawabanSubscriptionWhereInput[] | JawabanSubscriptionWhereInput;
  NOT?: JawabanSubscriptionWhereInput[] | JawabanSubscriptionWhereInput;
}

export interface PertanyaanCreateOneInput {
  create?: PertanyaanCreateInput;
  connect?: PertanyaanWhereUniqueInput;
}

export interface JawabanMahasiswaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  JawabanSoal?: JawabanWhereInput;
  AND?: JawabanMahasiswaWhereInput[] | JawabanMahasiswaWhereInput;
  OR?: JawabanMahasiswaWhereInput[] | JawabanMahasiswaWhereInput;
  NOT?: JawabanMahasiswaWhereInput[] | JawabanMahasiswaWhereInput;
}

export interface PertanyaanCreateInput {
  isi: String;
  gambar?: PertanyaanCreategambarInput;
}

export interface SoalMahasiswaUpsertWithWhereUniqueNestedInput {
  where: SoalMahasiswaWhereUniqueInput;
  update: SoalMahasiswaUpdateDataInput;
  create: SoalMahasiswaCreateInput;
}

export interface PertanyaanCreategambarInput {
  set?: String[] | String;
}

export interface SoalMahasiswaUpdateManyInput {
  create?: SoalMahasiswaCreateInput[] | SoalMahasiswaCreateInput;
  delete?: SoalMahasiswaWhereUniqueInput[] | SoalMahasiswaWhereUniqueInput;
  connect?: SoalMahasiswaWhereUniqueInput[] | SoalMahasiswaWhereUniqueInput;
  disconnect?: SoalMahasiswaWhereUniqueInput[] | SoalMahasiswaWhereUniqueInput;
  update?:
    | SoalMahasiswaUpdateWithWhereUniqueNestedInput[]
    | SoalMahasiswaUpdateWithWhereUniqueNestedInput;
  upsert?:
    | SoalMahasiswaUpsertWithWhereUniqueNestedInput[]
    | SoalMahasiswaUpsertWithWhereUniqueNestedInput;
}

export interface JawabanUpdateInput {
  isi?: String;
  gambar?: String;
  pertanyaan?: PertanyaanUpdateOneRequiredInput;
  kebenaran?: Boolean;
}

export interface MahasiswaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nim?: String;
  nim_not?: String;
  nim_in?: String[] | String;
  nim_not_in?: String[] | String;
  nim_lt?: String;
  nim_lte?: String;
  nim_gt?: String;
  nim_gte?: String;
  nim_contains?: String;
  nim_not_contains?: String;
  nim_starts_with?: String;
  nim_not_starts_with?: String;
  nim_ends_with?: String;
  nim_not_ends_with?: String;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: MahasiswaWhereInput[] | MahasiswaWhereInput;
  OR?: MahasiswaWhereInput[] | MahasiswaWhereInput;
  NOT?: MahasiswaWhereInput[] | MahasiswaWhereInput;
}

export interface PertanyaanUpdateOneRequiredInput {
  create?: PertanyaanCreateInput;
  update?: PertanyaanUpdateDataInput;
  upsert?: PertanyaanUpsertNestedInput;
  connect?: PertanyaanWhereUniqueInput;
}

export type MahasiswaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  nim?: String;
}>;

export interface PertanyaanUpdateDataInput {
  isi?: String;
  gambar?: PertanyaanUpdategambarInput;
}

export type MataKuliahWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  kode?: String;
}>;

export interface PertanyaanUpdategambarInput {
  set?: String[] | String;
}

export interface PengawasCreateOneInput {
  create?: PengawasCreateInput;
  connect?: PengawasWhereUniqueInput;
}

export interface PertanyaanUpsertNestedInput {
  update: PertanyaanUpdateDataInput;
  create: PertanyaanCreateInput;
}

export interface UjianCreateInput {
  Kelas: KelasCreateOneInput;
  pengawas: PengawasCreateOneInput;
  listSoal?: SoalMahasiswaCreateManyInput;
  tanggalPelaksanaan: DateTimeInput;
  tokenUjian: String;
}

export interface JawabanMahasiswaCreateInput {
  JawabanSoal: JawabanCreateOneInput;
}

export interface JawabanMahasiswaUpdateWithWhereUniqueNestedInput {
  where: JawabanMahasiswaWhereUniqueInput;
  data: JawabanMahasiswaUpdateDataInput;
}

export interface JawabanCreateOneInput {
  create?: JawabanCreateInput;
  connect?: JawabanWhereUniqueInput;
}

export interface PilihanGandaUpdateDataInput {
  pertanyaan?: PertanyaanUpdateOneRequiredInput;
  jawaban?: JawabanUpdateManyInput;
}

export interface JawabanMahasiswaUpdateInput {
  JawabanSoal?: JawabanUpdateOneRequiredInput;
}

export interface MahasiswaUpsertNestedInput {
  update: MahasiswaUpdateDataInput;
  create: MahasiswaCreateInput;
}

export interface JawabanUpdateOneRequiredInput {
  create?: JawabanCreateInput;
  update?: JawabanUpdateDataInput;
  upsert?: JawabanUpsertNestedInput;
  connect?: JawabanWhereUniqueInput;
}

export interface SoalMahasiswaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  mahasiswa?: MahasiswaWhereInput;
  listSoal_every?: PilihanGandaWhereInput;
  listSoal_some?: PilihanGandaWhereInput;
  listSoal_none?: PilihanGandaWhereInput;
  listJawaban_every?: JawabanMahasiswaWhereInput;
  listJawaban_some?: JawabanMahasiswaWhereInput;
  listJawaban_none?: JawabanMahasiswaWhereInput;
  AND?: SoalMahasiswaWhereInput[] | SoalMahasiswaWhereInput;
  OR?: SoalMahasiswaWhereInput[] | SoalMahasiswaWhereInput;
  NOT?: SoalMahasiswaWhereInput[] | SoalMahasiswaWhereInput;
}

export interface JawabanUpdateDataInput {
  isi?: String;
  gambar?: String;
  pertanyaan?: PertanyaanUpdateOneRequiredInput;
  kebenaran?: Boolean;
}

export interface SoalMahasiswaCreateInput {
  mahasiswa: MahasiswaCreateOneInput;
  listSoal?: PilihanGandaCreateManyInput;
  listJawaban?: JawabanMahasiswaCreateManyInput;
}

export interface JawabanUpsertNestedInput {
  update: JawabanUpdateDataInput;
  create: JawabanCreateInput;
}

export interface JawabanUpdateWithWhereUniqueNestedInput {
  where: JawabanWhereUniqueInput;
  data: JawabanUpdateDataInput;
}

export interface KelasCreateInput {
  tahunAjaran: String;
  mataKuliah: MataKuliahCreateOneInput;
  listMahasiswa?: MahasiswaCreateManyInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface MataKuliahCreateOneInput {
  create?: MataKuliahCreateInput;
  connect?: MataKuliahWhereUniqueInput;
}

export interface PilihanGandaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PilihanGandaWhereInput;
  AND?:
    | PilihanGandaSubscriptionWhereInput[]
    | PilihanGandaSubscriptionWhereInput;
  OR?:
    | PilihanGandaSubscriptionWhereInput[]
    | PilihanGandaSubscriptionWhereInput;
  NOT?:
    | PilihanGandaSubscriptionWhereInput[]
    | PilihanGandaSubscriptionWhereInput;
}

export interface MataKuliahCreateInput {
  kode: String;
  nama: String;
}

export interface KelasSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: KelasWhereInput;
  AND?: KelasSubscriptionWhereInput[] | KelasSubscriptionWhereInput;
  OR?: KelasSubscriptionWhereInput[] | KelasSubscriptionWhereInput;
  NOT?: KelasSubscriptionWhereInput[] | KelasSubscriptionWhereInput;
}

export interface MahasiswaCreateManyInput {
  create?: MahasiswaCreateInput[] | MahasiswaCreateInput;
  connect?: MahasiswaWhereUniqueInput[] | MahasiswaWhereUniqueInput;
}

export interface UserUpdateInput {
  gambar?: String;
  email?: String;
  password?: String;
  passwordKasih?: String;
  permissions?: UserUpdatepermissionsInput;
  admin?: AdminUpdateOneWithoutUserInput;
  mahasiswa?: MahasiswaUpdateOneWithoutUserInput;
  dosen?: DosenUpdateOneWithoutUserInput;
  pengawas?: PengawasUpdateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface MahasiswaCreateInput {
  nim: String;
  nama: String;
  user: UserCreateOneWithoutMahasiswaInput;
}

export interface KelasWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  tahunAjaran?: String;
  tahunAjaran_not?: String;
  tahunAjaran_in?: String[] | String;
  tahunAjaran_not_in?: String[] | String;
  tahunAjaran_lt?: String;
  tahunAjaran_lte?: String;
  tahunAjaran_gt?: String;
  tahunAjaran_gte?: String;
  tahunAjaran_contains?: String;
  tahunAjaran_not_contains?: String;
  tahunAjaran_starts_with?: String;
  tahunAjaran_not_starts_with?: String;
  tahunAjaran_ends_with?: String;
  tahunAjaran_not_ends_with?: String;
  mataKuliah?: MataKuliahWhereInput;
  listMahasiswa_every?: MahasiswaWhereInput;
  listMahasiswa_some?: MahasiswaWhereInput;
  listMahasiswa_none?: MahasiswaWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  AND?: KelasWhereInput[] | KelasWhereInput;
  OR?: KelasWhereInput[] | KelasWhereInput;
  NOT?: KelasWhereInput[] | KelasWhereInput;
}

export interface UserCreateOneWithoutMahasiswaInput {
  create?: UserCreateWithoutMahasiswaInput;
  connect?: UserWhereUniqueInput;
}

export interface KelasUpdateDataInput {
  tahunAjaran?: String;
  mataKuliah?: MataKuliahUpdateOneRequiredInput;
  listMahasiswa?: MahasiswaUpdateManyInput;
}

export interface UserCreateWithoutMahasiswaInput {
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions?: UserCreatepermissionsInput;
  admin?: AdminCreateOneWithoutUserInput;
  dosen?: DosenCreateOneWithoutUserInput;
  pengawas?: PengawasCreateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface AdminWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  nama?: String;
  nama_not?: String;
  nama_in?: String[] | String;
  nama_not_in?: String[] | String;
  nama_lt?: String;
  nama_lte?: String;
  nama_gt?: String;
  nama_gte?: String;
  nama_contains?: String;
  nama_not_contains?: String;
  nama_starts_with?: String;
  nama_not_starts_with?: String;
  nama_ends_with?: String;
  nama_not_ends_with?: String;
  user?: UserWhereInput;
  AND?: AdminWhereInput[] | AdminWhereInput;
  OR?: AdminWhereInput[] | AdminWhereInput;
  NOT?: AdminWhereInput[] | AdminWhereInput;
}

export interface KelasUpdateInput {
  tahunAjaran?: String;
  mataKuliah?: MataKuliahUpdateOneRequiredInput;
  listMahasiswa?: MahasiswaUpdateManyInput;
}

export interface PilihanGandaUpsertWithWhereUniqueNestedInput {
  where: PilihanGandaWhereUniqueInput;
  update: PilihanGandaUpdateDataInput;
  create: PilihanGandaCreateInput;
}

export interface MataKuliahUpdateOneRequiredInput {
  create?: MataKuliahCreateInput;
  update?: MataKuliahUpdateDataInput;
  upsert?: MataKuliahUpsertNestedInput;
  connect?: MataKuliahWhereUniqueInput;
}

export type SoalMahasiswaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MataKuliahUpdateDataInput {
  kode?: String;
  nama?: String;
}

export interface JawabanUpsertWithWhereUniqueNestedInput {
  where: JawabanWhereUniqueInput;
  update: JawabanUpdateDataInput;
  create: JawabanCreateInput;
}

export interface MataKuliahUpsertNestedInput {
  update: MataKuliahUpdateDataInput;
  create: MataKuliahCreateInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface MahasiswaUpdateManyInput {
  create?: MahasiswaCreateInput[] | MahasiswaCreateInput;
  delete?: MahasiswaWhereUniqueInput[] | MahasiswaWhereUniqueInput;
  connect?: MahasiswaWhereUniqueInput[] | MahasiswaWhereUniqueInput;
  disconnect?: MahasiswaWhereUniqueInput[] | MahasiswaWhereUniqueInput;
  update?:
    | MahasiswaUpdateWithWhereUniqueNestedInput[]
    | MahasiswaUpdateWithWhereUniqueNestedInput;
  upsert?:
    | MahasiswaUpsertWithWhereUniqueNestedInput[]
    | MahasiswaUpsertWithWhereUniqueNestedInput;
}

export type JawabanMahasiswaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MahasiswaUpdateWithWhereUniqueNestedInput {
  where: MahasiswaWhereUniqueInput;
  data: MahasiswaUpdateDataInput;
}

export interface PengawasUpdateDataInput {
  nama?: String;
  user?: UserUpdateOneRequiredWithoutPengawasInput;
}

export interface MahasiswaUpdateDataInput {
  nim?: String;
  nama?: String;
  user?: UserUpdateOneRequiredWithoutMahasiswaInput;
}

export type PertanyaanWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface UserUpdateOneRequiredWithoutMahasiswaInput {
  create?: UserCreateWithoutMahasiswaInput;
  update?: UserUpdateWithoutMahasiswaDataInput;
  upsert?: UserUpsertWithoutMahasiswaInput;
  connect?: UserWhereUniqueInput;
}

export interface PilihanGandaCreateManyInput {
  create?: PilihanGandaCreateInput[] | PilihanGandaCreateInput;
  connect?: PilihanGandaWhereUniqueInput[] | PilihanGandaWhereUniqueInput;
}

export interface UserUpdateWithoutMahasiswaDataInput {
  gambar?: String;
  email?: String;
  password?: String;
  passwordKasih?: String;
  permissions?: UserUpdatepermissionsInput;
  admin?: AdminUpdateOneWithoutUserInput;
  dosen?: DosenUpdateOneWithoutUserInput;
  pengawas?: PengawasUpdateOneWithoutUserInput;
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface MataKuliahSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MataKuliahWhereInput;
  AND?: MataKuliahSubscriptionWhereInput[] | MataKuliahSubscriptionWhereInput;
  OR?: MataKuliahSubscriptionWhereInput[] | MataKuliahSubscriptionWhereInput;
  NOT?: MataKuliahSubscriptionWhereInput[] | MataKuliahSubscriptionWhereInput;
}

export interface MataKuliahUpdateInput {
  kode?: String;
  nama?: String;
}

export interface MahasiswaUpdateInput {
  nim?: String;
  nama?: String;
  user?: UserUpdateOneRequiredWithoutMahasiswaInput;
}

export interface MahasiswaUpsertWithWhereUniqueNestedInput {
  where: MahasiswaWhereUniqueInput;
  update: MahasiswaUpdateDataInput;
  create: MahasiswaCreateInput;
}

export interface UserUpsertWithoutMahasiswaInput {
  update: UserUpdateWithoutMahasiswaDataInput;
  create: UserCreateWithoutMahasiswaInput;
}

export interface SoalMahasiswaUpdateDataInput {
  mahasiswa?: MahasiswaUpdateOneRequiredInput;
  listSoal?: PilihanGandaUpdateManyInput;
  listJawaban?: JawabanMahasiswaUpdateManyInput;
}

export interface PilihanGandaUpdateInput {
  pertanyaan?: PertanyaanUpdateOneRequiredInput;
  jawaban?: JawabanUpdateManyInput;
}

export interface PilihanGandaUpdateWithWhereUniqueNestedInput {
  where: PilihanGandaWhereUniqueInput;
  data: PilihanGandaUpdateDataInput;
}

export interface UjianUpdateInput {
  Kelas?: KelasUpdateOneRequiredInput;
  pengawas?: PengawasUpdateOneRequiredInput;
  listSoal?: SoalMahasiswaUpdateManyInput;
  tanggalPelaksanaan?: DateTimeInput;
  tokenUjian?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValuesNode {
  id: ID_Output;
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions: Permission[];
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface UserPreviousValues
  extends Promise<UserPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  gambar: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  passwordKasih: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gambar: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  passwordKasih: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
}

export interface AggregateJawabanMahasiswaNode {
  count: Int;
}

export interface AggregateJawabanMahasiswa
  extends Promise<AggregateJawabanMahasiswaNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJawabanMahasiswaSubscription
  extends Promise<AsyncIterator<AggregateJawabanMahasiswaNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PageInfoNode {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfo extends Promise<PageInfoNode>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfoNode>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface KelasNode {
  id: ID_Output;
  tahunAjaran: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Kelas extends Promise<KelasNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  tahunAjaran: () => Promise<String>;
  mataKuliah: <T = MataKuliah>() => T;
  listMahasiswa: <T = Promise<Array<MahasiswaNode>>>(args?: {
    where?: MahasiswaWhereInput;
    orderBy?: MahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface KelasSubscription
  extends Promise<AsyncIterator<KelasNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tahunAjaran: () => Promise<AsyncIterator<String>>;
  mataKuliah: <T = MataKuliahSubscription>() => T;
  listMahasiswa: <
    T = Promise<AsyncIterator<Array<MahasiswaSubscription>>>
  >(args?: {
    where?: MahasiswaWhereInput;
    orderBy?: MahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateAdminNode {
  count: Int;
}

export interface AggregateAdmin
  extends Promise<AggregateAdminNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAdminSubscription
  extends Promise<AsyncIterator<AggregateAdminNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UjianPreviousValuesNode {
  id: ID_Output;
  tanggalPelaksanaan: DateTimeOutput;
  tokenUjian: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UjianPreviousValues
  extends Promise<UjianPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tanggalPelaksanaan: () => Promise<DateTimeOutput>;
  tokenUjian: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UjianPreviousValuesSubscription
  extends Promise<AsyncIterator<UjianPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tanggalPelaksanaan: () => Promise<AsyncIterator<DateTimeOutput>>;
  tokenUjian: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface JawabanMahasiswaEdgeNode {
  cursor: String;
}

export interface JawabanMahasiswaEdge
  extends Promise<JawabanMahasiswaEdgeNode>,
    Fragmentable {
  node: <T = JawabanMahasiswa>() => T;
  cursor: () => Promise<String>;
}

export interface JawabanMahasiswaEdgeSubscription
  extends Promise<AsyncIterator<JawabanMahasiswaEdgeNode>>,
    Fragmentable {
  node: <T = JawabanMahasiswaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayloadNode {
  count: Long;
}

export interface BatchPayload extends Promise<BatchPayloadNode>, Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayloadNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdgeNode {
  cursor: String;
}

export interface UserEdge extends Promise<UserEdgeNode>, Fragmentable {
  node: <T = User>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdgeNode>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface JawabanMahasiswaConnectionNode {}

export interface JawabanMahasiswaConnection
  extends Promise<JawabanMahasiswaConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<JawabanMahasiswaEdgeNode>>>() => T;
  aggregate: <T = AggregateJawabanMahasiswa>() => T;
}

export interface JawabanMahasiswaConnectionSubscription
  extends Promise<AsyncIterator<JawabanMahasiswaConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<JawabanMahasiswaEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregateJawabanMahasiswaSubscription>() => T;
}

export interface UserSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayload
  extends Promise<UserSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = User>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValues>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface JawabanMahasiswaNode {
  id: ID_Output;
}

export interface JawabanMahasiswa
  extends Promise<JawabanMahasiswaNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  JawabanSoal: <T = Jawaban>() => T;
}

export interface JawabanMahasiswaSubscription
  extends Promise<AsyncIterator<JawabanMahasiswaNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  JawabanSoal: <T = JawabanSubscription>() => T;
}

export interface UjianEdgeNode {
  cursor: String;
}

export interface UjianEdge extends Promise<UjianEdgeNode>, Fragmentable {
  node: <T = Ujian>() => T;
  cursor: () => Promise<String>;
}

export interface UjianEdgeSubscription
  extends Promise<AsyncIterator<UjianEdgeNode>>,
    Fragmentable {
  node: <T = UjianSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AdminNode {
  id: ID_Output;
  nama: String;
}

export interface Admin extends Promise<AdminNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
  user: <T = User>() => T;
}

export interface AdminSubscription
  extends Promise<AsyncIterator<AdminNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface UserNode {
  id: ID_Output;
  gambar?: String;
  email: String;
  password: String;
  passwordKasih?: String;
  permissions: Permission[];
  resetToken?: String;
  resetTokenExpiry?: String;
}

export interface User extends Promise<UserNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  gambar: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  passwordKasih: () => Promise<String>;
  permissions: () => Promise<Permission[]>;
  admin: <T = Admin>() => T;
  mahasiswa: <T = Mahasiswa>() => T;
  dosen: <T = Dosen>() => T;
  pengawas: <T = Pengawas>() => T;
  resetToken: () => Promise<String>;
  resetTokenExpiry: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<UserNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  gambar: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  passwordKasih: () => Promise<AsyncIterator<String>>;
  permissions: () => Promise<AsyncIterator<Permission[]>>;
  admin: <T = AdminSubscription>() => T;
  mahasiswa: <T = MahasiswaSubscription>() => T;
  dosen: <T = DosenSubscription>() => T;
  pengawas: <T = PengawasSubscription>() => T;
  resetToken: () => Promise<AsyncIterator<String>>;
  resetTokenExpiry: () => Promise<AsyncIterator<String>>;
}

export interface AdminSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface AdminSubscriptionPayload
  extends Promise<AdminSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Admin>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AdminPreviousValues>() => T;
}

export interface AdminSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AdminSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AdminSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AdminPreviousValuesSubscription>() => T;
}

export interface AggregateSoalMahasiswaNode {
  count: Int;
}

export interface AggregateSoalMahasiswa
  extends Promise<AggregateSoalMahasiswaNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSoalMahasiswaSubscription
  extends Promise<AsyncIterator<AggregateSoalMahasiswaNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AdminPreviousValuesNode {
  id: ID_Output;
  nama: String;
}

export interface AdminPreviousValues
  extends Promise<AdminPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
}

export interface AdminPreviousValuesSubscription
  extends Promise<AsyncIterator<AdminPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface SoalMahasiswaConnectionNode {}

export interface SoalMahasiswaConnection
  extends Promise<SoalMahasiswaConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<SoalMahasiswaEdgeNode>>>() => T;
  aggregate: <T = AggregateSoalMahasiswa>() => T;
}

export interface SoalMahasiswaConnectionSubscription
  extends Promise<AsyncIterator<SoalMahasiswaConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<SoalMahasiswaEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregateSoalMahasiswaSubscription>() => T;
}

export interface AggregateJawabanNode {
  count: Int;
}

export interface AggregateJawaban
  extends Promise<AggregateJawabanNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateJawabanSubscription
  extends Promise<AsyncIterator<AggregateJawabanNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SoalMahasiswaNode {
  id: ID_Output;
}

export interface SoalMahasiswa
  extends Promise<SoalMahasiswaNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  mahasiswa: <T = Mahasiswa>() => T;
  listSoal: <T = Promise<Array<PilihanGandaNode>>>(args?: {
    where?: PilihanGandaWhereInput;
    orderBy?: PilihanGandaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  listJawaban: <T = Promise<Array<JawabanMahasiswaNode>>>(args?: {
    where?: JawabanMahasiswaWhereInput;
    orderBy?: JawabanMahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface SoalMahasiswaSubscription
  extends Promise<AsyncIterator<SoalMahasiswaNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  mahasiswa: <T = MahasiswaSubscription>() => T;
  listSoal: <
    T = Promise<AsyncIterator<Array<PilihanGandaSubscription>>>
  >(args?: {
    where?: PilihanGandaWhereInput;
    orderBy?: PilihanGandaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  listJawaban: <
    T = Promise<AsyncIterator<Array<JawabanMahasiswaSubscription>>>
  >(args?: {
    where?: JawabanMahasiswaWhereInput;
    orderBy?: JawabanMahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface DosenSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface DosenSubscriptionPayload
  extends Promise<DosenSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Dosen>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DosenPreviousValues>() => T;
}

export interface DosenSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DosenSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DosenSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DosenPreviousValuesSubscription>() => T;
}

export interface PilihanGandaEdgeNode {
  cursor: String;
}

export interface PilihanGandaEdge
  extends Promise<PilihanGandaEdgeNode>,
    Fragmentable {
  node: <T = PilihanGanda>() => T;
  cursor: () => Promise<String>;
}

export interface PilihanGandaEdgeSubscription
  extends Promise<AsyncIterator<PilihanGandaEdgeNode>>,
    Fragmentable {
  node: <T = PilihanGandaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface DosenPreviousValuesNode {
  id: ID_Output;
  nip: String;
  nama: String;
}

export interface DosenPreviousValues
  extends Promise<DosenPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nip: () => Promise<String>;
  nama: () => Promise<String>;
}

export interface DosenPreviousValuesSubscription
  extends Promise<AsyncIterator<DosenPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nip: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface DosenNode {
  id: ID_Output;
  nip: String;
  nama: String;
}

export interface Dosen extends Promise<DosenNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  nip: () => Promise<String>;
  nama: () => Promise<String>;
  user: <T = User>() => T;
}

export interface DosenSubscription
  extends Promise<AsyncIterator<DosenNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nip: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface JawabanEdgeNode {
  cursor: String;
}

export interface JawabanEdge extends Promise<JawabanEdgeNode>, Fragmentable {
  node: <T = Jawaban>() => T;
  cursor: () => Promise<String>;
}

export interface JawabanEdgeSubscription
  extends Promise<AsyncIterator<JawabanEdgeNode>>,
    Fragmentable {
  node: <T = JawabanSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePertanyaanNode {
  count: Int;
}

export interface AggregatePertanyaan
  extends Promise<AggregatePertanyaanNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePertanyaanSubscription
  extends Promise<AsyncIterator<AggregatePertanyaanNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface JawabanSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface JawabanSubscriptionPayload
  extends Promise<JawabanSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Jawaban>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JawabanPreviousValues>() => T;
}

export interface JawabanSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JawabanSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JawabanSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JawabanPreviousValuesSubscription>() => T;
}

export interface PertanyaanConnectionNode {}

export interface PertanyaanConnection
  extends Promise<PertanyaanConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<PertanyaanEdgeNode>>>() => T;
  aggregate: <T = AggregatePertanyaan>() => T;
}

export interface PertanyaanConnectionSubscription
  extends Promise<AsyncIterator<PertanyaanConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<PertanyaanEdgeSubscription>>>>() => T;
  aggregate: <T = AggregatePertanyaanSubscription>() => T;
}

export interface JawabanPreviousValuesNode {
  id: ID_Output;
  isi: String;
  gambar?: String;
  kebenaran: Boolean;
}

export interface JawabanPreviousValues
  extends Promise<JawabanPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isi: () => Promise<String>;
  gambar: () => Promise<String>;
  kebenaran: () => Promise<Boolean>;
}

export interface JawabanPreviousValuesSubscription
  extends Promise<AsyncIterator<JawabanPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isi: () => Promise<AsyncIterator<String>>;
  gambar: () => Promise<AsyncIterator<String>>;
  kebenaran: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregatePengawasNode {
  count: Int;
}

export interface AggregatePengawas
  extends Promise<AggregatePengawasNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePengawasSubscription
  extends Promise<AsyncIterator<AggregatePengawasNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface JawabanConnectionNode {}

export interface JawabanConnection
  extends Promise<JawabanConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<JawabanEdgeNode>>>() => T;
  aggregate: <T = AggregateJawaban>() => T;
}

export interface JawabanConnectionSubscription
  extends Promise<AsyncIterator<JawabanConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<JawabanEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateJawabanSubscription>() => T;
}

export interface PengawasConnectionNode {}

export interface PengawasConnection
  extends Promise<PengawasConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<PengawasEdgeNode>>>() => T;
  aggregate: <T = AggregatePengawas>() => T;
}

export interface PengawasConnectionSubscription
  extends Promise<AsyncIterator<PengawasConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<PengawasEdgeSubscription>>>>() => T;
  aggregate: <T = AggregatePengawasSubscription>() => T;
}

export interface JawabanMahasiswaSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface JawabanMahasiswaSubscriptionPayload
  extends Promise<JawabanMahasiswaSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = JawabanMahasiswa>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = JawabanMahasiswaPreviousValues>() => T;
}

export interface JawabanMahasiswaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<JawabanMahasiswaSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = JawabanMahasiswaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = JawabanMahasiswaPreviousValuesSubscription>() => T;
}

export interface MataKuliahEdgeNode {
  cursor: String;
}

export interface MataKuliahEdge
  extends Promise<MataKuliahEdgeNode>,
    Fragmentable {
  node: <T = MataKuliah>() => T;
  cursor: () => Promise<String>;
}

export interface MataKuliahEdgeSubscription
  extends Promise<AsyncIterator<MataKuliahEdgeNode>>,
    Fragmentable {
  node: <T = MataKuliahSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface JawabanMahasiswaPreviousValuesNode {
  id: ID_Output;
}

export interface JawabanMahasiswaPreviousValues
  extends Promise<JawabanMahasiswaPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface JawabanMahasiswaPreviousValuesSubscription
  extends Promise<AsyncIterator<JawabanMahasiswaPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface AggregateMahasiswaNode {
  count: Int;
}

export interface AggregateMahasiswa
  extends Promise<AggregateMahasiswaNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMahasiswaSubscription
  extends Promise<AsyncIterator<AggregateMahasiswaNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UjianSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UjianSubscriptionPayload
  extends Promise<UjianSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Ujian>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UjianPreviousValues>() => T;
}

export interface UjianSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UjianSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UjianSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UjianPreviousValuesSubscription>() => T;
}

export interface MahasiswaConnectionNode {}

export interface MahasiswaConnection
  extends Promise<MahasiswaConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<MahasiswaEdgeNode>>>() => T;
  aggregate: <T = AggregateMahasiswa>() => T;
}

export interface MahasiswaConnectionSubscription
  extends Promise<AsyncIterator<MahasiswaConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<MahasiswaEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateMahasiswaSubscription>() => T;
}

export interface KelasSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface KelasSubscriptionPayload
  extends Promise<KelasSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Kelas>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = KelasPreviousValues>() => T;
}

export interface KelasSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<KelasSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = KelasSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = KelasPreviousValuesSubscription>() => T;
}

export interface KelasEdgeNode {
  cursor: String;
}

export interface KelasEdge extends Promise<KelasEdgeNode>, Fragmentable {
  node: <T = Kelas>() => T;
  cursor: () => Promise<String>;
}

export interface KelasEdgeSubscription
  extends Promise<AsyncIterator<KelasEdgeNode>>,
    Fragmentable {
  node: <T = KelasSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface KelasPreviousValuesNode {
  id: ID_Output;
  tahunAjaran: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface KelasPreviousValues
  extends Promise<KelasPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tahunAjaran: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface KelasPreviousValuesSubscription
  extends Promise<AsyncIterator<KelasPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tahunAjaran: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AdminEdgeNode {
  cursor: String;
}

export interface AdminEdge extends Promise<AdminEdgeNode>, Fragmentable {
  node: <T = Admin>() => T;
  cursor: () => Promise<String>;
}

export interface AdminEdgeSubscription
  extends Promise<AsyncIterator<AdminEdgeNode>>,
    Fragmentable {
  node: <T = AdminSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PertanyaanNode {
  id: ID_Output;
  isi: String;
  gambar: String[];
}

export interface Pertanyaan extends Promise<PertanyaanNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  isi: () => Promise<String>;
  gambar: () => Promise<String[]>;
}

export interface PertanyaanSubscription
  extends Promise<AsyncIterator<PertanyaanNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isi: () => Promise<AsyncIterator<String>>;
  gambar: () => Promise<AsyncIterator<String[]>>;
}

export interface AggregateUserNode {
  count: Int;
}

export interface AggregateUser
  extends Promise<AggregateUserNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUserNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MahasiswaSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MahasiswaSubscriptionPayload
  extends Promise<MahasiswaSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Mahasiswa>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MahasiswaPreviousValues>() => T;
}

export interface MahasiswaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MahasiswaSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MahasiswaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MahasiswaPreviousValuesSubscription>() => T;
}

export interface AggregateUjianNode {
  count: Int;
}

export interface AggregateUjian
  extends Promise<AggregateUjianNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUjianSubscription
  extends Promise<AsyncIterator<AggregateUjianNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MahasiswaPreviousValuesNode {
  id: ID_Output;
  nim: String;
  nama: String;
}

export interface MahasiswaPreviousValues
  extends Promise<MahasiswaPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nim: () => Promise<String>;
  nama: () => Promise<String>;
}

export interface MahasiswaPreviousValuesSubscription
  extends Promise<AsyncIterator<MahasiswaPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nim: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface UjianNode {
  id: ID_Output;
  tanggalPelaksanaan: DateTimeOutput;
  tokenUjian: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface Ujian extends Promise<UjianNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  Kelas: <T = Kelas>() => T;
  pengawas: <T = Pengawas>() => T;
  listSoal: <T = Promise<Array<SoalMahasiswaNode>>>(args?: {
    where?: SoalMahasiswaWhereInput;
    orderBy?: SoalMahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tanggalPelaksanaan: () => Promise<DateTimeOutput>;
  tokenUjian: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UjianSubscription
  extends Promise<AsyncIterator<UjianNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  Kelas: <T = KelasSubscription>() => T;
  pengawas: <T = PengawasSubscription>() => T;
  listSoal: <
    T = Promise<AsyncIterator<Array<SoalMahasiswaSubscription>>>
  >(args?: {
    where?: SoalMahasiswaWhereInput;
    orderBy?: SoalMahasiswaOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  tanggalPelaksanaan: () => Promise<AsyncIterator<DateTimeOutput>>;
  tokenUjian: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface JawabanNode {
  id: ID_Output;
  isi: String;
  gambar?: String;
  kebenaran: Boolean;
}

export interface Jawaban extends Promise<JawabanNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  isi: () => Promise<String>;
  gambar: () => Promise<String>;
  pertanyaan: <T = Pertanyaan>() => T;
  kebenaran: () => Promise<Boolean>;
}

export interface JawabanSubscription
  extends Promise<AsyncIterator<JawabanNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isi: () => Promise<AsyncIterator<String>>;
  gambar: () => Promise<AsyncIterator<String>>;
  pertanyaan: <T = PertanyaanSubscription>() => T;
  kebenaran: () => Promise<AsyncIterator<Boolean>>;
}

export interface MahasiswaNode {
  id: ID_Output;
  nim: String;
  nama: String;
}

export interface Mahasiswa extends Promise<MahasiswaNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  nim: () => Promise<String>;
  nama: () => Promise<String>;
  user: <T = User>() => T;
}

export interface MahasiswaSubscription
  extends Promise<AsyncIterator<MahasiswaNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nim: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface MataKuliahSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface MataKuliahSubscriptionPayload
  extends Promise<MataKuliahSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MataKuliah>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MataKuliahPreviousValues>() => T;
}

export interface MataKuliahSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MataKuliahSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MataKuliahSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MataKuliahPreviousValuesSubscription>() => T;
}

export interface PilihanGandaConnectionNode {}

export interface PilihanGandaConnection
  extends Promise<PilihanGandaConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<PilihanGandaEdgeNode>>>() => T;
  aggregate: <T = AggregatePilihanGanda>() => T;
}

export interface PilihanGandaConnectionSubscription
  extends Promise<AsyncIterator<PilihanGandaConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <
    T = Promise<AsyncIterator<Array<PilihanGandaEdgeSubscription>>>
  >() => T;
  aggregate: <T = AggregatePilihanGandaSubscription>() => T;
}

export interface MataKuliahPreviousValuesNode {
  id: ID_Output;
  kode: String;
  nama: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MataKuliahPreviousValues
  extends Promise<MataKuliahPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  kode: () => Promise<String>;
  nama: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MataKuliahPreviousValuesSubscription
  extends Promise<AsyncIterator<MataKuliahPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  kode: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PertanyaanEdgeNode {
  cursor: String;
}

export interface PertanyaanEdge
  extends Promise<PertanyaanEdgeNode>,
    Fragmentable {
  node: <T = Pertanyaan>() => T;
  cursor: () => Promise<String>;
}

export interface PertanyaanEdgeSubscription
  extends Promise<AsyncIterator<PertanyaanEdgeNode>>,
    Fragmentable {
  node: <T = PertanyaanSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDosenNode {
  count: Int;
}

export interface AggregateDosen
  extends Promise<AggregateDosenNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDosenSubscription
  extends Promise<AsyncIterator<AggregateDosenNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PengawasEdgeNode {
  cursor: String;
}

export interface PengawasEdge extends Promise<PengawasEdgeNode>, Fragmentable {
  node: <T = Pengawas>() => T;
  cursor: () => Promise<String>;
}

export interface PengawasEdgeSubscription
  extends Promise<AsyncIterator<PengawasEdgeNode>>,
    Fragmentable {
  node: <T = PengawasSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PengawasSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PengawasSubscriptionPayload
  extends Promise<PengawasSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Pengawas>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PengawasPreviousValues>() => T;
}

export interface PengawasSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PengawasSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PengawasSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PengawasPreviousValuesSubscription>() => T;
}

export interface MataKuliahConnectionNode {}

export interface MataKuliahConnection
  extends Promise<MataKuliahConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<MataKuliahEdgeNode>>>() => T;
  aggregate: <T = AggregateMataKuliah>() => T;
}

export interface MataKuliahConnectionSubscription
  extends Promise<AsyncIterator<MataKuliahConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<MataKuliahEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateMataKuliahSubscription>() => T;
}

export interface PengawasPreviousValuesNode {
  id: ID_Output;
  nama: String;
}

export interface PengawasPreviousValues
  extends Promise<PengawasPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
}

export interface PengawasPreviousValuesSubscription
  extends Promise<AsyncIterator<PengawasPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
}

export interface AggregateKelasNode {
  count: Int;
}

export interface AggregateKelas
  extends Promise<AggregateKelasNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateKelasSubscription
  extends Promise<AsyncIterator<AggregateKelasNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DosenEdgeNode {
  cursor: String;
}

export interface DosenEdge extends Promise<DosenEdgeNode>, Fragmentable {
  node: <T = Dosen>() => T;
  cursor: () => Promise<String>;
}

export interface DosenEdgeSubscription
  extends Promise<AsyncIterator<DosenEdgeNode>>,
    Fragmentable {
  node: <T = DosenSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MataKuliahNode {
  id: ID_Output;
  kode: String;
  nama: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface MataKuliah extends Promise<MataKuliahNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  kode: () => Promise<String>;
  nama: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface MataKuliahSubscription
  extends Promise<AsyncIterator<MataKuliahNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  kode: () => Promise<AsyncIterator<String>>;
  nama: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PertanyaanSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PertanyaanSubscriptionPayload
  extends Promise<PertanyaanSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = Pertanyaan>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PertanyaanPreviousValues>() => T;
}

export interface PertanyaanSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PertanyaanSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PertanyaanSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PertanyaanPreviousValuesSubscription>() => T;
}

export interface UjianConnectionNode {}

export interface UjianConnection
  extends Promise<UjianConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UjianEdgeNode>>>() => T;
  aggregate: <T = AggregateUjian>() => T;
}

export interface UjianConnectionSubscription
  extends Promise<AsyncIterator<UjianConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UjianEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUjianSubscription>() => T;
}

export interface PertanyaanPreviousValuesNode {
  id: ID_Output;
  isi: String;
  gambar: String[];
}

export interface PertanyaanPreviousValues
  extends Promise<PertanyaanPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isi: () => Promise<String>;
  gambar: () => Promise<String[]>;
}

export interface PertanyaanPreviousValuesSubscription
  extends Promise<AsyncIterator<PertanyaanPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isi: () => Promise<AsyncIterator<String>>;
  gambar: () => Promise<AsyncIterator<String[]>>;
}

export interface AggregatePilihanGandaNode {
  count: Int;
}

export interface AggregatePilihanGanda
  extends Promise<AggregatePilihanGandaNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePilihanGandaSubscription
  extends Promise<AsyncIterator<AggregatePilihanGandaNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DosenConnectionNode {}

export interface DosenConnection
  extends Promise<DosenConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<DosenEdgeNode>>>() => T;
  aggregate: <T = AggregateDosen>() => T;
}

export interface DosenConnectionSubscription
  extends Promise<AsyncIterator<DosenConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<DosenEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateDosenSubscription>() => T;
}

export interface PengawasNode {
  id: ID_Output;
  nama: String;
}

export interface Pengawas extends Promise<PengawasNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  nama: () => Promise<String>;
  user: <T = User>() => T;
}

export interface PengawasSubscription
  extends Promise<AsyncIterator<PengawasNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  nama: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
}

export interface PilihanGandaSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PilihanGandaSubscriptionPayload
  extends Promise<PilihanGandaSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PilihanGanda>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PilihanGandaPreviousValues>() => T;
}

export interface PilihanGandaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PilihanGandaSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PilihanGandaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PilihanGandaPreviousValuesSubscription>() => T;
}

export interface MahasiswaEdgeNode {
  cursor: String;
}

export interface MahasiswaEdge
  extends Promise<MahasiswaEdgeNode>,
    Fragmentable {
  node: <T = Mahasiswa>() => T;
  cursor: () => Promise<String>;
}

export interface MahasiswaEdgeSubscription
  extends Promise<AsyncIterator<MahasiswaEdgeNode>>,
    Fragmentable {
  node: <T = MahasiswaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnectionNode {}

export interface UserConnection
  extends Promise<UserConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<UserEdgeNode>>>() => T;
  aggregate: <T = AggregateUser>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<UserEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface SoalMahasiswaPreviousValuesNode {
  id: ID_Output;
}

export interface SoalMahasiswaPreviousValues
  extends Promise<SoalMahasiswaPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface SoalMahasiswaPreviousValuesSubscription
  extends Promise<AsyncIterator<SoalMahasiswaPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface SoalMahasiswaSubscriptionPayloadNode {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface SoalMahasiswaSubscriptionPayload
  extends Promise<SoalMahasiswaSubscriptionPayloadNode>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SoalMahasiswa>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SoalMahasiswaPreviousValues>() => T;
}

export interface SoalMahasiswaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SoalMahasiswaSubscriptionPayloadNode>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SoalMahasiswaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SoalMahasiswaPreviousValuesSubscription>() => T;
}

export interface AdminConnectionNode {}

export interface AdminConnection
  extends Promise<AdminConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<AdminEdgeNode>>>() => T;
  aggregate: <T = AggregateAdmin>() => T;
}

export interface AdminConnectionSubscription
  extends Promise<AsyncIterator<AdminConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<AdminEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateAdminSubscription>() => T;
}

export interface PilihanGandaPreviousValuesNode {
  id: ID_Output;
}

export interface PilihanGandaPreviousValues
  extends Promise<PilihanGandaPreviousValuesNode>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface PilihanGandaPreviousValuesSubscription
  extends Promise<AsyncIterator<PilihanGandaPreviousValuesNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface SoalMahasiswaEdgeNode {
  cursor: String;
}

export interface SoalMahasiswaEdge
  extends Promise<SoalMahasiswaEdgeNode>,
    Fragmentable {
  node: <T = SoalMahasiswa>() => T;
  cursor: () => Promise<String>;
}

export interface SoalMahasiswaEdgeSubscription
  extends Promise<AsyncIterator<SoalMahasiswaEdgeNode>>,
    Fragmentable {
  node: <T = SoalMahasiswaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface KelasConnectionNode {}

export interface KelasConnection
  extends Promise<KelasConnectionNode>,
    Fragmentable {
  pageInfo: <T = PageInfo>() => T;
  edges: <T = Promise<Array<KelasEdgeNode>>>() => T;
  aggregate: <T = AggregateKelas>() => T;
}

export interface KelasConnectionSubscription
  extends Promise<AsyncIterator<KelasConnectionNode>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<Array<KelasEdgeSubscription>>>>() => T;
  aggregate: <T = AggregateKelasSubscription>() => T;
}

export interface AggregateMataKuliahNode {
  count: Int;
}

export interface AggregateMataKuliah
  extends Promise<AggregateMataKuliahNode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMataKuliahSubscription
  extends Promise<AsyncIterator<AggregateMataKuliahNode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PilihanGandaNode {
  id: ID_Output;
}

export interface PilihanGanda extends Promise<PilihanGandaNode>, Fragmentable {
  id: () => Promise<ID_Output>;
  pertanyaan: <T = Pertanyaan>() => T;
  jawaban: <T = Promise<Array<JawabanNode>>>(args?: {
    where?: JawabanWhereInput;
    orderBy?: JawabanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface PilihanGandaSubscription
  extends Promise<AsyncIterator<PilihanGandaNode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  pertanyaan: <T = PertanyaanSubscription>() => T;
  jawaban: <T = Promise<AsyncIterator<Array<JawabanSubscription>>>>(args?: {
    where?: JawabanWhereInput;
    orderBy?: JawabanOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/**
 * Type Defs
 */

export const prisma: Prisma;
